<ResourceDictionary x:Class="WpfDarkMode.Themes.Controls"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
                    xmlns:converters="clr-namespace:WpfDarkMode.Themes.Converters"
                    xmlns:ap="clr-namespace:WpfDarkMode.Themes.Attached">

    <converters:BrushToColorConverter x:Key="BrushToColorConverter" />

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true"
                               Stroke="{DynamicResource ResourceKey=ABrush.ColourfulGlyph.Static}"
                               StrokeThickness="1" StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource ResourceKey=ABrush.Foreground.Static}" StrokeThickness="1" StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="TextBoxErrorTemplate">
        <StackPanel IsHitTestVisible="False">
            <Border BorderBrush="#FFF01428" BorderThickness="1">
                <AdornedElementPlaceholder x:Name="AdornerPlaceholder" />
            </Border>
            <Grid MaxWidth="{Binding ElementName=AdornerPlaceholder, Path=ActualWidth}">
                <Border Background="{DynamicResource ResourceKey=ABrush.Tone5.Background.Static}"
                        BorderBrush="{DynamicResource ResourceKey=ABrush.Tone5.Border.Static}"
                        BorderThickness="1" CornerRadius="3" Opacity="0.8">
                    <Border.Effect>
                        <DropShadowEffect BlurRadius="5" Opacity="0.5" />
                    </Border.Effect>
                </Border>
                <!-- ReSharper disable once Xaml.BindingWithoutContextNotResolved -->
                <TextBlock Text="{Binding Path=[0].ErrorContent}" Foreground="Red" Margin="5,1,1,1" Padding="5" ToolTip="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Text}" TextWrapping="Wrap" />
            </Grid>
        </StackPanel>
    </ControlTemplate>

    <Style TargetType="{x:Type TypeName=Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ResourceKey=FocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey=Button.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=Button.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=Button.Static.Foreground}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding Property=BorderBrush}"
                            BorderThickness="{TemplateBinding Property=BorderThickness}"
                            Background="{TemplateBinding Property=Background}" SnapsToDevicePixels="true"
                            CornerRadius="{TemplateBinding Property=ap:CornerRadiusHelper.Value}">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding Property=HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Property=Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding Property=VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ResourceKey=Button.Defaulted.Background}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=Button.Defaulted.Border}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ResourceKey=Button.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=Button.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ResourceKey=Button.Pressed.Background}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=Button.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ResourceKey=Button.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=Button.Disabled.Border}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource ResourceKey=Button.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ResourceKey=FocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey=Button.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=Button.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=Button.Static.Foreground}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=ToggleButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding Property=BorderBrush}"
                            BorderThickness="{TemplateBinding Property=BorderThickness}"
                            Background="{TemplateBinding Property=Background}" SnapsToDevicePixels="true"
                            CornerRadius="{TemplateBinding Property=ap:CornerRadiusHelper.Value}">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding Property=HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Property=Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding Property=VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=Button.Defaulted.Border}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ResourceKey=Button.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=Button.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ResourceKey=Button.Pressed.Background}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=Button.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ResourceKey=Button.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=Button.Disabled.Border}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource ResourceKey=Button.Disabled.Foreground}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ResourceKey=ToggleButton.IsChecked.Background}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=ToggleButton.IsChecked.Border}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsPressed" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ResourceKey=ToggleButton.Pressed.IsChecked.Background}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=ToggleButton.Pressed.IsChecked.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ResourceKey=ToggleButton.MouseOver.IsChecked.Background}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=ToggleButton.MouseOver.IsChecked.Border}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="SliderThumbHorizontalTop" TargetType="{x:Type TypeName=Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 0,6 C0,6 5.5,0 5.5,0 5.5,0 11,6 11,6 11,6 11,18 11,18 11,18 0,18 0,18 0,18 0,6 0,6 z" Fill="{DynamicResource ResourceKey=SliderThumb.Static.Background}"
                  Stretch="Fill" SnapsToDevicePixels="True" Stroke="{DynamicResource ResourceKey=SliderThumb.Static.Border}" StrokeThickness="1" UseLayoutRounding="True" VerticalAlignment="Center" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.MouseOver.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Pressed.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Pressed.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Disabled.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Disabled.Border}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbHorizontalBottom" TargetType="{x:Type TypeName=Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 0,12 C0,12 5.5,18 5.5,18 5.5,18 11,12 11,12 11,12 11,0 11,0 11,0 0,0 0,0 0,0 0,12 0,12 z" Fill="{DynamicResource ResourceKey=SliderThumb.Static.Background}"
                  Stretch="Fill" SnapsToDevicePixels="True" Stroke="{DynamicResource ResourceKey=SliderThumb.Static.Border}" StrokeThickness="1" UseLayoutRounding="True" VerticalAlignment="Center" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.MouseOver.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Pressed.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Pressed.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Disabled.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Disabled.Border}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="SliderThumbHorizontalDefault" TargetType="{x:Type TypeName=Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 0,0 C0,0 11,0 11,0 11,0 11,18 11,18 11,18 0,18 0,18 0,18 0,0 0,0 z" Fill="{DynamicResource ResourceKey=SliderThumb.Static.Background}"
                  Stretch="Fill" SnapsToDevicePixels="True" Stroke="{DynamicResource ResourceKey=SliderThumb.Static.Border}" StrokeThickness="1" UseLayoutRounding="True" VerticalAlignment="Center" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.MouseOver.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Pressed.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Pressed.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Disabled.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Disabled.Border}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type TypeName=RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Property=Background}" Height="{TemplateBinding Property=Height}" Width="{TemplateBinding Property=Width}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="SliderHorizontal" TargetType="{x:Type TypeName=Slider}">
        <Border x:Name="border" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}" SnapsToDevicePixels="True">
            <Grid>
                <TickBar x:Name="TopTick" Fill="{TemplateBinding Property=Foreground}" Height="4" Margin="0,0,0,2" Placement="Top" Visibility="Collapsed" />
                <TickBar x:Name="BottomTick" Fill="{TemplateBinding Property=Foreground}" Height="4" Margin="0,2,0,0" Placement="Bottom" Visibility="Collapsed" />
                <Border x:Name="TrackBackground" BorderBrush="{DynamicResource ResourceKey=SliderThumb.Track.Border}" BorderThickness="1" Background="{DynamicResource ResourceKey=SliderThumb.Track.Background}"
                        Height="4.0" Margin="5,0" VerticalAlignment="center">
                    <Canvas Margin="-6,-1">
                        <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource ResourceKey={x:Static Member=SystemColors.HighlightBrushKey}}" Height="4.0" Visibility="Hidden" />
                    </Canvas>
                </Border>
                <Track x:Name="PART_Track">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static Member=Slider.DecreaseLarge}" Style="{StaticResource ResourceKey=RepeatButtonTransparent}" />
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static Member=Slider.IncreaseLarge}" Style="{StaticResource ResourceKey=RepeatButtonTransparent}" />
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb" Focusable="False" Height="18" OverridesDefaultStyle="True" Template="{StaticResource ResourceKey=SliderThumbHorizontalDefault}" VerticalAlignment="Center" Width="11" />
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource ResourceKey=SliderThumbHorizontalTop}" />
                <Setter Property="Margin" TargetName="TrackBackground" Value="5,2,5,0" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource ResourceKey=SliderThumbHorizontalBottom}" />
                <Setter Property="Margin" TargetName="TrackBackground" Value="5,0,5,2" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="true">
                <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="Foreground" TargetName="Thumb" Value="Blue" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="AbletonSliderHorizontal" TargetType="{x:Type TypeName=Slider}">
        <Border x:Name="border" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}"
                Background="{TemplateBinding Property=Background}" SnapsToDevicePixels="True">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding Property=MinHeight}" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <TickBar x:Name="TopTick" Fill="{TemplateBinding Property=Foreground}" Height="4" Margin="0,0,0,2" Placement="Top" Grid.Row="0" Visibility="Collapsed" />
                <TickBar x:Name="BottomTick" Fill="{TemplateBinding Property=Foreground}" Height="4" Margin="0,2,0,0" Placement="Bottom" Grid.Row="2" Visibility="Collapsed" />
                <Border x:Name="TrackBackground" BorderBrush="{DynamicResource ResourceKey=SliderThumb.Track.Border}" BorderThickness="1"
                        Background="{DynamicResource ResourceKey=SliderThumb.Track.Background}" Height="4.0" Margin="5,0" Grid.Row="1" VerticalAlignment="Center">
                    <Canvas Margin="-6,-1">
                        <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource ResourceKey={x:Static Member=SystemColors.HighlightBrushKey}}" Height="4.0" Visibility="Hidden" />
                    </Canvas>
                </Border>
                <Track x:Name="PART_Track" Grid.Row="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static Member=Slider.DecreaseLarge}" Background="{DynamicResource ResourceKey=ABrush.ColourfulGlyph.Static}"
                                      BorderBrush="{DynamicResource ResourceKey=ABrush.Tone5.Border.Static}" BorderThickness="1 1 0 1" />
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static Member=Slider.IncreaseLarge}" Background="Transparent" BorderBrush="Transparent" />
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb" Focusable="False" Width="11" OverridesDefaultStyle="True" Template="{StaticResource ResourceKey=SliderThumbHorizontalDefault}" VerticalAlignment="Stretch" />
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource ResourceKey=SliderThumbHorizontalTop}" />
                <Setter Property="Margin" TargetName="TrackBackground" Value="5,2,5,0" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource ResourceKey=SliderThumbHorizontalBottom}" />
                <Setter Property="Margin" TargetName="TrackBackground" Value="5,0,5,2" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="true">
                <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="Foreground" TargetName="Thumb" Value="Blue" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="SliderThumbVerticalLeft" TargetType="{x:Type TypeName=Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 6,11 C6,11 0,5.5 0,5.5 0,5.5 6,0 6,0 6,0 18,0 18,0 18,0 18,11 18,11 18,11 6,11 6,11 z" Fill="{DynamicResource ResourceKey=SliderThumb.Static.Background}"
                  Stretch="Fill" Stroke="{DynamicResource ResourceKey=SliderThumb.Static.Border}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.MouseOver.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Pressed.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Pressed.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Disabled.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Disabled.Border}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbVerticalRight" TargetType="{x:Type TypeName=Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 12,11 C12,11 18,5.5 18,5.5 18,5.5 12,0 12,0 12,0 0,0 0,0 0,0 0,11 0,11 0,11 12,11 12,11 z" Fill="{DynamicResource ResourceKey=SliderThumb.Static.Background}"
                  Stretch="Fill" Stroke="{DynamicResource ResourceKey=SliderThumb.Static.Border}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.MouseOver.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Pressed.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Pressed.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Disabled.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Disabled.Border}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbVerticalDefault" TargetType="{x:Type TypeName=Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M0.5,0.5 L18.5,0.5 18.5,11.5 0.5,11.5z" Fill="{DynamicResource ResourceKey=SliderThumb.Static.Background}" Stretch="Fill" Stroke="{DynamicResource ResourceKey=SliderThumb.Static.Border}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.MouseOver.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Pressed.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Pressed.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Disabled.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ResourceKey=SliderThumb.Disabled.Border}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderVertical" TargetType="{x:Type TypeName=Slider}">
        <Border x:Name="border" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}" SnapsToDevicePixels="True">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition MinWidth="{TemplateBinding Property=MinWidth}" Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <TickBar x:Name="TopTick" Grid.Column="0" Fill="{TemplateBinding Property=Foreground}" Margin="0,0,2,0" Placement="Left" Visibility="Collapsed" Width="4" />
                <TickBar x:Name="BottomTick" Grid.Column="2" Fill="{TemplateBinding Property=Foreground}" Margin="2,0,0,0" Placement="Right" Visibility="Collapsed" Width="4" />
                <Border x:Name="TrackBackground" BorderBrush="{DynamicResource ResourceKey=SliderThumb.Track.Border}" BorderThickness="1"
                        Background="{DynamicResource ResourceKey=SliderThumb.Track.Background}" Grid.Column="1" HorizontalAlignment="center" Margin="0,5" Width="4.0">
                    <Canvas Margin="-1,-6">
                        <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource ResourceKey={x:Static Member=SystemColors.HighlightBrushKey}}" Visibility="Hidden" Width="4.0" />
                    </Canvas>
                </Border>
                <Track x:Name="PART_Track" Grid.Column="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static Member=Slider.DecreaseLarge}" Style="{StaticResource ResourceKey=RepeatButtonTransparent}" />
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static Member=Slider.IncreaseLarge}" Style="{StaticResource ResourceKey=RepeatButtonTransparent}" />
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb" Focusable="False" Height="11" OverridesDefaultStyle="True" Template="{StaticResource ResourceKey=SliderThumbVerticalDefault}" VerticalAlignment="Top" Width="18" />
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource ResourceKey=SliderThumbVerticalLeft}" />
                <Setter Property="Margin" TargetName="TrackBackground" Value="2,5,0,5" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource ResourceKey=SliderThumbVerticalRight}" />
                <Setter Property="Margin" TargetName="TrackBackground" Value="0,5,2,5" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="true">
                <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="Foreground" TargetName="Thumb" Value="Blue" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type TypeName=Slider}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=SliderThumb.Static.Foreground}" />
        <Setter Property="Template" Value="{StaticResource ResourceKey=SliderHorizontal}" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template" Value="{DynamicResource ResourceKey=SliderVertical}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AbletonLiveSlider" TargetType="{x:Type TypeName=Slider}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=SliderThumb.Static.Foreground}" />
        <Setter Property="Template" Value="{StaticResource ResourceKey=AbletonSliderHorizontal}" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template" Value="{DynamicResource ResourceKey=SliderVertical}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- Thumbs -->
    <Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type TypeName=Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=Thumb}">
                    <Rectangle x:Name="rectangle" Fill="{DynamicResource ResourceKey=ScrollBar.Static.Thumb}" Height="{TemplateBinding Property=Height}"
                               SnapsToDevicePixels="True" Width="{TemplateBinding Property=Width}" Margin="1,0" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource ResourceKey=ScrollBar.MouseOver.Thumb}" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource ResourceKey=ScrollBar.Pressed.Thumb}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumbHorizontal" TargetType="{x:Type TypeName=Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=Thumb}">
                    <Rectangle x:Name="rectangle" Fill="{DynamicResource ResourceKey=ScrollBar.Static.Thumb}" Height="{TemplateBinding Property=Height}"
                               SnapsToDevicePixels="True" Width="{TemplateBinding Property=Width}" Margin="0,1" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource ResourceKey=ScrollBar.MouseOver.Thumb}" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource ResourceKey=ScrollBar.Pressed.Thumb}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Buttons -->

    <Style x:Key="CompactScrollBarButton" TargetType="{x:Type TypeName=RepeatButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ResourceKey=FocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey=ScrollBar.Static.Background}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=RepeatButton}">
                    <Border x:Name="border" Background="{TemplateBinding Property=Background}"
                            BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding Property=HorizontalContentAlignment}" Margin="{TemplateBinding Property=Padding}"
                                          SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Property=VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ResourceKey=ScrollBar.MouseOver.Background}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ResourceKey=ScrollBar.Pressed.Background}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarButton" TargetType="{x:Type TypeName=RepeatButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ResourceKey=FocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey=ScrollBarButton.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=ScrollBarButton.Static.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=RepeatButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}"
                            Background="{TemplateBinding Property=Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding Property=HorizontalContentAlignment}" Margin="{TemplateBinding Property=Padding}"
                                          SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Property=VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ResourceKey=ScrollBar.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=ScrollBar.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ResourceKey=ScrollBar.Pressed.Background}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=ScrollBar.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56" />
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ResourceKey=ScrollBar.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=ScrollBar.Disabled.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Scrollbars -->

    <Style TargetType="{x:Type TypeName=ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey=ScrollBar.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=ScrollBar.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="BorderThickness" Value="1,0" />
        <Setter Property="Width" Value="{DynamicResource ResourceKey={x:Static Member=SystemParameters.VerticalScrollBarWidthKey}}" />
        <Setter Property="MinWidth" Value="{DynamicResource ResourceKey={x:Static Member=SystemParameters.VerticalScrollBarWidthKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="{DynamicResource ResourceKey={x:Static Member=SystemParameters.VerticalScrollBarButtonHeightKey}}" />
                            <RowDefinition Height="0.00001*" />
                            <RowDefinition MaxHeight="{DynamicResource ResourceKey={x:Static Member=SystemParameters.VerticalScrollBarButtonHeightKey}}" />
                        </Grid.RowDefinitions>
                        <Border BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}" Grid.Row="1" />
                        <RepeatButton Grid.Row="0" x:Name="PART_LineUpButton" Command="{x:Static Member=ScrollBar.LineUpCommand}" Style="{StaticResource ResourceKey=ScrollBarButton}">
                            <Path x:Name="ArrowTop" Data="M 0,4 C0,4 0,6 0,6 0,6 3.5,2.5 3.5,2.5 3.5,2.5 7,6 7,6 7,6 7,4 7,4 7,4 3.5,0.5 3.5,0.5 3.5,0.5 0,4 0,4 z"
                                  Fill="{DynamicResource ResourceKey=ScrollBar.Static.Glyph}" Margin="3,4,3,3" Stretch="Uniform" />
                        </RepeatButton>
                        <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding Property=IsMouseOver}" Grid.Row="1">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static Member=ScrollBar.PageUpCommand}" Style="{StaticResource ResourceKey=RepeatButtonTransparent}" />
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static Member=ScrollBar.PageDownCommand}" Style="{StaticResource ResourceKey=RepeatButtonTransparent}" />
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ResourceKey=ScrollBarThumbVertical}" />
                            </Track.Thumb>
                        </Track>
                        <RepeatButton x:Name="PART_LineDownButton" Command="{x:Static Member=ScrollBar.LineDownCommand}" Grid.Row="2" Style="{StaticResource ResourceKey=ScrollBarButton}">
                            <Path x:Name="ArrowBottom" Data="M 0,2.5 C0,2.5 0,0.5 0,0.5 0,0.5 3.5,4 3.5,4 3.5,4 7,0.5 7,0.5 7,0.5 7,2.5 7,2.5 7,2.5 3.5,6 3.5,6 3.5,6 0,2.5 0,2.5 z"
                                  Fill="{DynamicResource ResourceKey=ScrollBar.Static.Glyph}" Margin="3,4,3,3" Stretch="Uniform" />
                        </RepeatButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, ElementName=PART_LineDownButton}" Value="true" />
                                <Condition Binding="{Binding Path=IsPressed, ElementName=PART_LineDownButton}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowBottom" Value="{DynamicResource ResourceKey=ScrollBar.Pressed.Glyph}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, ElementName=PART_LineUpButton}" Value="true" />
                                <Condition Binding="{Binding Path=IsPressed, ElementName=PART_LineUpButton}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowTop" Value="{DynamicResource ResourceKey=ScrollBar.Pressed.Glyph}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, ElementName=PART_LineDownButton}" Value="true" />
                                <Condition Binding="{Binding Path=IsPressed, ElementName=PART_LineDownButton}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowBottom" Value="{DynamicResource ResourceKey=ScrollBar.MouseOver.Glyph}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, ElementName=PART_LineUpButton}" Value="true" />
                                <Condition Binding="{Binding Path=IsPressed, ElementName=PART_LineUpButton}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowTop" Value="{DynamicResource ResourceKey=ScrollBar.MouseOver.Glyph}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="ArrowTop" Value="{DynamicResource ResourceKey=ScrollBar.Disabled.Glyph}" />
                            <Setter Property="Fill" TargetName="ArrowBottom" Value="{DynamicResource ResourceKey=ScrollBar.Disabled.Glyph}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="MinWidth" Value="0" />
                <Setter Property="Height" Value="{DynamicResource ResourceKey={x:Static Member=SystemParameters.HorizontalScrollBarHeightKey}}" />
                <Setter Property="MinHeight" Value="{DynamicResource ResourceKey={x:Static Member=SystemParameters.HorizontalScrollBarHeightKey}}" />
                <Setter Property="BorderThickness" Value="0,1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TypeName=ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MaxWidth="{DynamicResource ResourceKey={x:Static Member=SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                                    <ColumnDefinition Width="0.00001*" />
                                    <ColumnDefinition MaxWidth="{DynamicResource ResourceKey={x:Static Member=SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                                </Grid.ColumnDefinitions>
                                <Border BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}" Grid.Column="1" />
                                <RepeatButton Grid.Column="0" x:Name="PART_LineLeftButton" Command="{x:Static Member=ScrollBar.LineLeftCommand}" Style="{StaticResource ResourceKey=ScrollBarButton}">
                                    <Path x:Name="ArrowLeft" Data="M 3.18,7 C3.18,7 5,7 5,7 5,7 1.81,3.5 1.81,3.5 1.81,3.5 5,0 5,0 5,0 3.18,0 3.18,0 3.18,0 0,3.5 0,3.5 0,3.5 3.18,7 3.18,7 z"
                                          Fill="{DynamicResource ResourceKey=ScrollBar.Static.Glyph}" Margin="3" Stretch="Uniform" />
                                </RepeatButton>
                                <Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding Property=IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static Member=ScrollBar.PageLeftCommand}" Style="{StaticResource ResourceKey=RepeatButtonTransparent}" />
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static Member=ScrollBar.PageRightCommand}" Style="{StaticResource ResourceKey=RepeatButtonTransparent}" />
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ResourceKey=ScrollBarThumbHorizontal}" />
                                    </Track.Thumb>
                                </Track>
                                <RepeatButton x:Name="PART_LineRightButton" Grid.Column="2" Command="{x:Static Member=ScrollBar.LineRightCommand}" Style="{StaticResource ResourceKey=ScrollBarButton}">
                                    <Path x:Name="ArrowRight" Data="M 1.81,7 C1.81,7 0,7 0,7 0,7 3.18,3.5 3.18,3.5 3.18,3.5 0,0 0,0 0,0 1.81,0 1.81,0 1.81,0 5,3.5 5,3.5 5,3.5 1.81,7 1.81,7 z"
                                          Fill="{DynamicResource ResourceKey=ScrollBar.Static.Glyph}" Margin="3" Stretch="Uniform" />
                                </RepeatButton>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=IsMouseOver, ElementName=PART_LineRightButton}" Value="true" />
                                        <Condition Binding="{Binding Path=IsPressed, ElementName=PART_LineRightButton}" Value="true" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="{DynamicResource ResourceKey=ScrollBar.Pressed.Glyph}" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=IsMouseOver, ElementName=PART_LineLeftButton}" Value="true" />
                                        <Condition Binding="{Binding Path=IsPressed, ElementName=PART_LineLeftButton}" Value="true" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="{DynamicResource ResourceKey=ScrollBar.Pressed.Glyph}" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=IsMouseOver, ElementName=PART_LineRightButton}" Value="true" />
                                        <Condition Binding="{Binding Path=IsPressed, ElementName=PART_LineRightButton}" Value="false" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="{DynamicResource ResourceKey=ScrollBar.MouseOver.Glyph}" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=IsMouseOver, ElementName=PART_LineLeftButton}" Value="true" />
                                        <Condition Binding="{Binding Path=IsPressed, ElementName=PART_LineLeftButton}" Value="false" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="{DynamicResource ResourceKey=ScrollBar.MouseOver.Glyph}" />
                                </MultiDataTrigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="{DynamicResource ResourceKey=ScrollBar.Disabled.Glyph}" />
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="{DynamicResource ResourceKey=ScrollBar.Disabled.Glyph}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CompactScrollBarStyle" TargetType="{x:Type TypeName=ScrollBar}" BasedOn="{StaticResource ResourceKey={x:Type TypeName=ScrollBar}}">
        <Setter Property="BorderThickness" Value="0,0" />
        <Setter Property="Width" Value="{DynamicResource ResourceKey={x:Static Member=SystemParameters.VerticalScrollBarWidthKey}}" />
        <Setter Property="MinWidth" Value="{DynamicResource ResourceKey={x:Static Member=SystemParameters.VerticalScrollBarWidthKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="{DynamicResource ResourceKey={x:Static Member=SystemParameters.VerticalScrollBarButtonHeightKey}}" />
                            <RowDefinition Height="0.00001*" />
                            <RowDefinition MaxHeight="{DynamicResource ResourceKey={x:Static Member=SystemParameters.VerticalScrollBarButtonHeightKey}}" />
                        </Grid.RowDefinitions>
                        <Border BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}" Grid.Row="1" />
                        <RepeatButton Grid.Row="0" x:Name="PART_LineUpButton" Command="{x:Static Member=ScrollBar.LineUpCommand}" Style="{StaticResource ResourceKey=CompactScrollBarButton}">
                            <Path x:Name="ArrowTop" Data="M 0,4 C0,4 0,6 0,6 0,6 3.5,2.5 3.5,2.5 3.5,2.5 7,6 7,6 7,6 7,4 7,4 7,4 3.5,0.5 3.5,0.5 3.5,0.5 0,4 0,4 z"
                                  Fill="{DynamicResource ResourceKey=ScrollBar.Static.Glyph}" Margin="3,4,3,3" Stretch="Uniform" />
                        </RepeatButton>
                        <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding Property=IsMouseOver}" Grid.Row="1">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static Member=ScrollBar.PageUpCommand}" Style="{StaticResource ResourceKey=RepeatButtonTransparent}" />
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static Member=ScrollBar.PageDownCommand}" Style="{StaticResource ResourceKey=RepeatButtonTransparent}" />
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ResourceKey=ScrollBarThumbVertical}" />
                            </Track.Thumb>
                        </Track>
                        <RepeatButton x:Name="PART_LineDownButton" Command="{x:Static Member=ScrollBar.LineDownCommand}" Grid.Row="2" Style="{StaticResource ResourceKey=CompactScrollBarButton}">
                            <Path x:Name="ArrowBottom" Data="M 0,2.5 C0,2.5 0,0.5 0,0.5 0,0.5 3.5,4 3.5,4 3.5,4 7,0.5 7,0.5 7,0.5 7,2.5 7,2.5 7,2.5 3.5,6 3.5,6 3.5,6 0,2.5 0,2.5 z"
                                  Fill="{DynamicResource ResourceKey=ScrollBar.Static.Glyph}" Margin="3,4,3,3" Stretch="Uniform" />
                        </RepeatButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, ElementName=PART_LineDownButton}" Value="true" />
                                <Condition Binding="{Binding Path=IsPressed, ElementName=PART_LineDownButton}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowBottom" Value="{DynamicResource ResourceKey=ScrollBar.Pressed.Glyph}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, ElementName=PART_LineUpButton}" Value="true" />
                                <Condition Binding="{Binding Path=IsPressed, ElementName=PART_LineUpButton}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowTop" Value="{DynamicResource ResourceKey=ScrollBar.Pressed.Glyph}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, ElementName=PART_LineDownButton}" Value="true" />
                                <Condition Binding="{Binding Path=IsPressed, ElementName=PART_LineDownButton}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowBottom" Value="{DynamicResource ResourceKey=ScrollBar.MouseOver.Glyph}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, ElementName=PART_LineUpButton}" Value="true" />
                                <Condition Binding="{Binding Path=IsPressed, ElementName=PART_LineUpButton}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowTop" Value="{DynamicResource ResourceKey=ScrollBar.MouseOver.Glyph}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="ArrowTop" Value="{DynamicResource ResourceKey=ScrollBar.Disabled.Glyph}" />
                            <Setter Property="Fill" TargetName="ArrowBottom" Value="{DynamicResource ResourceKey=ScrollBar.Disabled.Glyph}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="MinWidth" Value="0" />
                <Setter Property="Height" Value="{DynamicResource ResourceKey={x:Static Member=SystemParameters.HorizontalScrollBarHeightKey}}" />
                <Setter Property="MinHeight" Value="{DynamicResource ResourceKey={x:Static Member=SystemParameters.HorizontalScrollBarHeightKey}}" />
                <Setter Property="BorderThickness" Value="0,0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TypeName=ScrollBar}">
                            <Grid x:Name="Bg" Margin="0,0,0,0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MaxWidth="{DynamicResource ResourceKey={x:Static Member=SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                                    <ColumnDefinition Width="0.00001*" />
                                    <ColumnDefinition MaxWidth="{DynamicResource ResourceKey={x:Static Member=SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                                </Grid.ColumnDefinitions>
                                <Border BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}" Grid.Column="1" />
                                <RepeatButton Grid.Column="0" x:Name="PART_LineLeftButton" Command="{x:Static Member=ScrollBar.LineLeftCommand}" Style="{StaticResource ResourceKey=CompactScrollBarButton}">
                                    <Path x:Name="ArrowLeft" Data="M 3.18,7 C3.18,7 5,7 5,7 5,7 1.81,3.5 1.81,3.5 1.81,3.5 5,0 5,0 5,0 3.18,0 3.18,0 3.18,0 0,3.5 0,3.5 0,3.5 3.18,7 3.18,7 z"
                                          Fill="{DynamicResource ResourceKey=ScrollBar.Static.Glyph}" Margin="3" Stretch="Uniform" />
                                </RepeatButton>
                                <Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding Property=IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static Member=ScrollBar.PageLeftCommand}" Style="{StaticResource ResourceKey=RepeatButtonTransparent}" />
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static Member=ScrollBar.PageRightCommand}" Style="{StaticResource ResourceKey=RepeatButtonTransparent}" />
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ResourceKey=ScrollBarThumbHorizontal}" />
                                    </Track.Thumb>
                                </Track>
                                <RepeatButton x:Name="PART_LineRightButton" Grid.Column="2" Command="{x:Static Member=ScrollBar.LineRightCommand}" Style="{StaticResource ResourceKey=CompactScrollBarButton}">
                                    <Path x:Name="ArrowRight" Data="M 1.81,7 C1.81,7 0,7 0,7 0,7 3.18,3.5 3.18,3.5 3.18,3.5 0,0 0,0 0,0 1.81,0 1.81,0 1.81,0 5,3.5 5,3.5 5,3.5 1.81,7 1.81,7 z"
                                          Fill="{DynamicResource ResourceKey=ScrollBar.Static.Glyph}" Margin="3" Stretch="Uniform" />
                                </RepeatButton>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=IsMouseOver, ElementName=PART_LineRightButton}" Value="true" />
                                        <Condition Binding="{Binding Path=IsPressed, ElementName=PART_LineRightButton}" Value="true" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="{DynamicResource ResourceKey=ScrollBar.Pressed.Glyph}" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=IsMouseOver, ElementName=PART_LineLeftButton}" Value="true" />
                                        <Condition Binding="{Binding Path=IsPressed, ElementName=PART_LineLeftButton}" Value="true" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="{DynamicResource ResourceKey=ScrollBar.Pressed.Glyph}" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=IsMouseOver, ElementName=PART_LineRightButton}" Value="true" />
                                        <Condition Binding="{Binding Path=IsPressed, ElementName=PART_LineRightButton}" Value="false" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="{DynamicResource ResourceKey=ScrollBar.MouseOver.Glyph}" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=IsMouseOver, ElementName=PART_LineLeftButton}" Value="true" />
                                        <Condition Binding="{Binding Path=IsPressed, ElementName=PART_LineLeftButton}" Value="false" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="{DynamicResource ResourceKey=ScrollBar.MouseOver.Glyph}" />
                                </MultiDataTrigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="{DynamicResource ResourceKey=ScrollBar.Disabled.Glyph}" />
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="{DynamicResource ResourceKey=ScrollBar.Disabled.Glyph}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TypeName=ScrollViewer}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=ScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Property=Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Rectangle x:Name="Corner" Grid.Column="1" Fill="Transparent" Grid.Row="1" />
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding Property=CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False"
                                                ContentTemplate="{TemplateBinding Property=ContentTemplate}" Content="{TemplateBinding Property=Content}" Grid.Column="0" Margin="{TemplateBinding Property=Padding}" Grid.Row="0" />
                        <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding Property=ScrollableHeight}"
                                   Minimum="0" Grid.Row="0" Visibility="{TemplateBinding Property=ComputedVerticalScrollBarVisibility}"
                                   Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" ViewportSize="{TemplateBinding Property=ViewportHeight}" Grid.RowSpan="2" />
                        <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding Property=ScrollableWidth}"
                                   Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding Property=ComputedHorizontalScrollBarVisibility}"
                                   Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" ViewportSize="{TemplateBinding Property=ViewportWidth}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CompactBarsScrollViewerStyle" TargetType="{x:Type TypeName=ScrollViewer}" BasedOn="{StaticResource ResourceKey={x:Type TypeName=ScrollViewer}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=ScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Property=Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Rectangle x:Name="Corner" Grid.Column="1" Fill="Transparent" Grid.Row="1" />
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding Property=CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False"
                                                ContentTemplate="{TemplateBinding Property=ContentTemplate}" Content="{TemplateBinding Property=Content}" Grid.Column="0" Margin="{TemplateBinding Property=Padding}" Grid.Row="0" />
                        <ScrollBar x:Name="PART_VerticalScrollBar" Style="{StaticResource ResourceKey=CompactScrollBarStyle}" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1"
                                   Maximum="{TemplateBinding Property=ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding Property=ComputedVerticalScrollBarVisibility}"
                                   Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" ViewportSize="{TemplateBinding Property=ViewportHeight}" Grid.RowSpan="2" />
                        <ScrollBar x:Name="PART_HorizontalScrollBar" Style="{StaticResource ResourceKey=CompactScrollBarStyle}" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0"
                                   Maximum="{TemplateBinding Property=ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding Property=ComputedHorizontalScrollBarVisibility}"
                                   Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" ViewportSize="{TemplateBinding Property=ViewportWidth}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=Thumb}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey=Button.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=Button.Static.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=Button.Static.Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=Thumb}">
                    <Border BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=GridSplitter}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=ABrush.Tone5.Border.Static}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=GridSplitter}">
                    <Border BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=ProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ProgressBar.Progress}" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey=ProgressBar.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=ProgressBar.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Animation">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
                                            <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5" />
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}" />
                        <Rectangle x:Name="PART_Track" />
                        <Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left" Margin="1,1">
                            <Rectangle x:Name="Indicator" Fill="{TemplateBinding Property=Foreground}" />
                            <Rectangle x:Name="Animation" Fill="{TemplateBinding Property=Foreground}" RenderTransformOrigin="0.5,0.5">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=ToolTip}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=Popup.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=Popup.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="MaxWidth" Value="800" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Placement" Value="MousePoint" />
        <Setter Property="PlacementRectangle" Value="10 10 5 5" />
        <Setter Property="HorizontalOffset" Value="15" />
        <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
        <Setter Property="VerticalOffset" Value="15" />
        <Setter Property="ToolTipService.ShowDuration" Value="15000" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <themes:SystemDropShadowChrome Name="Shdw" Color="Transparent" CornerRadius="0" SnapsToDevicePixels="True">
                        <Border Name="Border" SnapsToDevicePixels="True" BorderThickness="1" Background="{TemplateBinding Property=Background}" BorderBrush="{TemplateBinding Property=BorderBrush}"
                                Width="{TemplateBinding Property=Width}" Height="{TemplateBinding Property=Height}">
                            <ContentPresenter Margin="5" HorizontalAlignment="Left" VerticalAlignment="Top">
                                <ContentPresenter.Resources>
                                    <Style TargetType="{x:Type TypeName=TextBlock}">
                                        <Setter Property="TextWrapping" Value="Wrap" />
                                        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                                        <Setter Property="TextAlignment" Value="Left" />
                                        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
                                    </Style>
                                </ContentPresenter.Resources>
                            </ContentPresenter>
                        </Border>
                    </themes:SystemDropShadowChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="True">
                            <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shdw" Property="themes:SystemDropShadowChrome.Color" Value="#71000000" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=Separator}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=ABrush.Tone6.Border.Static}" />
        <Setter Property="Margin" Value="0,2,0,2" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=Separator}">
                    <Border BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}" Height="1" SnapsToDevicePixels="true" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="VerticalSeparator" TargetType="{x:Type TypeName=Separator}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=ABrush.Tone6.Border.Static}" />
        <Setter Property="Margin" Value="2,0,2,0" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=Separator}">
                    <Border BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}" Width="1" SnapsToDevicePixels="true" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static Member=MenuItem.SeparatorStyleKey}" TargetType="{x:Type TypeName=Separator}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=MenuItem.IconBar.Static.Background}" />
        <Setter Property="Margin" Value="23,2,0,2" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=Separator}">
                    <Border BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}" Height="1" SnapsToDevicePixels="true" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=StatusBar}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=StatusBar.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=StatusBar.Static.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="FontFamily" Value="{DynamicResource ResourceKey={x:Static Member=SystemFonts.StatusFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource ResourceKey={x:Static Member=SystemFonts.StatusFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource ResourceKey={x:Static Member=SystemFonts.StatusFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource ResourceKey={x:Static Member=SystemFonts.StatusFontWeightKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=StatusBar}">
                    <Border BorderBrush="{TemplateBinding Property=BorderBrush}"
                            BorderThickness="{TemplateBinding Property=BorderThickness}"
                            Background="{TemplateBinding Property=Background}"
                            Padding="{TemplateBinding Property=Padding}"
                            SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=CheckBox}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=OptionMark.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=OptionMark.Static.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource ResourceKey=FocusVisual}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Margin" Value="0,2" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}"
                                HorizontalAlignment="Left" Margin="0 0 0 0" VerticalAlignment="{TemplateBinding Property=VerticalContentAlignment}" Height="16" Width="16">
                            <Grid x:Name="markGrid">
                                <Path x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "
                                      Fill="{DynamicResource ResourceKey=OptionMark.Static.Glyph}" Margin="1" Opacity="0" Stretch="None" Width="10" Height="9" />
                                <Rectangle x:Name="indeterminateMark" Fill="{DynamicResource ResourceKey=OptionMark.Static.Glyph}" Margin="2" Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="0" Focusable="False" HorizontalAlignment="{TemplateBinding Property=HorizontalContentAlignment}"
                                          Margin="21,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding Property=VerticalContentAlignment}" Width="Auto" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource ResourceKey=OptionMarkFocusVisual}" />
                            <Setter Property="Padding" Value="4,-1,0,0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource ResourceKey=OptionMark.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource ResourceKey=OptionMark.MouseOver.Border}" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource ResourceKey=OptionMark.MouseOver.Glyph}" />
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource ResourceKey=OptionMark.MouseOver.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource ResourceKey=OptionMark.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource ResourceKey=OptionMark.Disabled.Border}" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource ResourceKey=OptionMark.Disabled.Glyph}" />
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource ResourceKey=OptionMark.Disabled.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource ResourceKey=OptionMark.Pressed.Background}" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource ResourceKey=OptionMark.Pressed.Border}" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource ResourceKey=OptionMark.Pressed.Glyph}" />
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource ResourceKey=OptionMark.Pressed.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1" />
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0" />
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=RadioButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ResourceKey=FocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource RadioButton.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource RadioButton.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ap:CornerRadiusHelper.Value" Value="100" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="radioButtonBorder" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}"
                                CornerRadius="{TemplateBinding Property=ap:CornerRadiusHelper.Value}" HorizontalAlignment="{TemplateBinding Property=HorizontalContentAlignment}" Margin="0,0,0,0"
                                VerticalAlignment="{TemplateBinding Property=VerticalContentAlignment}" Width="16" Height="16">
                            <Grid x:Name="markGrid" Margin="2">
                                <Ellipse x:Name="optionMark" Fill="{DynamicResource RadioButton.Static.Glyph}" MinWidth="6" MinHeight="6" Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="0" Focusable="False" HorizontalAlignment="{TemplateBinding Property=HorizontalContentAlignment}" Margin="20,0,0,0"
                                          RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Property=VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource ResourceKey=OptionMarkFocusVisual}" />
                            <Setter Property="Padding" Value="4,-1,0,0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{DynamicResource RadioButton.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{DynamicResource RadioButton.MouseOver.Border}" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource RadioButton.MouseOver.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{DynamicResource RadioButton.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{DynamicResource RadioButton.Disabled.Border}" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource RadioButton.Disabled.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{DynamicResource RadioButton.Pressed.Background}" />
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{DynamicResource RadioButton.Pressed.Border}" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource RadioButton.Pressed.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0.56" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=TextElement}">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="RenderOptions.EdgeMode" Value="Unspecified" />
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
    </Style>

    <Style TargetType="{x:Type TypeName=TextBlock}">
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="TextAlignment" Value="Left" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="RenderOptions.EdgeMode" Value="Unspecified" />
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TypeName=Label}">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=Label}">
                    <Border BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}"
                            Padding="{TemplateBinding Property=Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding Property=HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding Property=VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type TypeName=TextBoxBase}" TargetType="{x:Type TypeName=TextBoxBase}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=TextBox.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=TextBox.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="CaretBrush" Value="{DynamicResource ResourceKey=ABrush.Glyph.Static}" />
        <Setter Property="SelectionBrush" Value="{DynamicResource ResourceKey=TextBox.Selection}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=TextBoxBase}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}"
                            Background="{TemplateBinding Property=Background}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=TextBox.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=TextBox.Focus.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                    <Condition Property="IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource ResourceKey=TextBox.Selection.Inactive}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type TypeName=Hyperlink}" TargetType="{x:Type TypeName=Hyperlink}">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="TextDecorations" Value="Underline" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.ColourfulGlyph.Static}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Disabled}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="true">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TypeName=RichTextBox}">
        <Style.Resources>
            <Style x:Key="{x:Type TypeName=FlowDocument}" TargetType="{x:Type TypeName=FlowDocument}">
                <Setter Property="OverridesDefaultStyle" Value="true" />
            </Style>
            <Style x:Key="{x:Type TypeName=Hyperlink}" BasedOn="{StaticResource {x:Type TypeName=Hyperlink}}" TargetType="{x:Type TypeName=Hyperlink}">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.ColourfulGlyph.Static}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Disabled}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="true">
                        <Setter Property="Cursor" Value="Hand" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="MinWidth" Value="10" />
        <Style.BasedOn>
            <StaticResource ResourceKey="{x:Type TypeName=TextBoxBase}" />
        </Style.BasedOn>
    </Style>

    <Style TargetType="{x:Type TypeName=TextBox}">
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ResourceKey=TextBoxErrorTemplate}" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey=TextBox.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=TextBox.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="CaretBrush" Value="{DynamicResource ResourceKey=ABrush.Glyph.Static}" />
        <Setter Property="SelectionBrush" Value="{DynamicResource ResourceKey=TextBox.Selection}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}"
                            Background="{TemplateBinding Property=Background}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=TextBox.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=TextBox.Focus.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                    <Condition Property="IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource ResourceKey=TextBox.Selection.Inactive}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="HintedTextBox" TargetType="{x:Type TypeName=TextBox}">
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ResourceKey=TextBoxErrorTemplate}" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey=TextBox.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=TextBox.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="CaretBrush" Value="{DynamicResource ResourceKey=ABrush.Glyph.Static}" />
        <Setter Property="SelectionBrush" Value="{DynamicResource ResourceKey=TextBox.Selection}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=TextBox}">
                    <Grid>
                        <Border x:Name="border" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}"
                                Background="{TemplateBinding Property=Background}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
                        </Border>
                        <TextBlock IsHitTestVisible="False"
                                   Text="{TemplateBinding Property=Tag}"
                                   x:Name="PART_Placeholder"
                                   FontFamily="{TemplateBinding Property=FontFamily}"
                                   FontSize="{TemplateBinding Property=FontSize}"
                                   Margin="3 0 0 0"
                                   Padding="{TemplateBinding Property=Padding}"
                                   VerticalAlignment="Center"
                                   HorizontalAlignment="{TemplateBinding Property=HorizontalAlignment}"
                                   Foreground="{DynamicResource ResourceKey=ABrush.Foreground.Disabled}">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TypeName=TextBlock}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=Text, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="">
                                            <Setter Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=IsFocused, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="True" />
                                                <Condition Binding="{Binding Path=(ap:TextHinting.ShowWhenFocused), RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="False" />
                                            </MultiDataTrigger.Conditions>
                                            <MultiDataTrigger.Setters>
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </MultiDataTrigger.Setters>
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=TextBox.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=TextBox.Focus.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                    <Condition Property="IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource ResourceKey=TextBox.Selection.Inactive}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="HintedPasswordBox" TargetType="{x:Type TypeName=PasswordBox}">
        <Setter Property="PasswordChar" Value="●" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey=TextBox.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=TextBox.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="ap:PasswordBoxHelper.ListenToLength" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=PasswordBox}">
                    <Grid>
                        <Border x:Name="border" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}"
                                Background="{TemplateBinding Property=Background}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
                        </Border>
                        <TextBlock IsHitTestVisible="False"
                                   Text="{TemplateBinding Property=Tag}"
                                   x:Name="PART_Placeholder"
                                   FontFamily="{TemplateBinding Property=FontFamily}"
                                   FontSize="{TemplateBinding Property=FontSize}"
                                   Margin="3 0 0 0"
                                   Padding="{TemplateBinding Property=Padding}"
                                   VerticalAlignment="Center"
                                   HorizontalAlignment="{TemplateBinding Property=HorizontalAlignment}"
                                   Foreground="{DynamicResource ResourceKey=ABrush.Foreground.Disabled}">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TypeName=TextBlock}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=(ap:PasswordBoxHelper.InputLength), RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="0">
                                            <Setter Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=IsFocused, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="True" />
                                                <Condition Binding="{Binding Path=(ap:TextHinting.ShowWhenFocused), RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="False" />
                                            </MultiDataTrigger.Conditions>
                                            <MultiDataTrigger.Setters>
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </MultiDataTrigger.Setters>
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=TextBox.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=TextBox.Focus.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                    <Condition Property="IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource ResourceKey=TextBox.Selection.Inactive}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TypeName=PasswordBox}">
        <Setter Property="PasswordChar" Value="●" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey=TextBox.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=TextBox.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=PasswordBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}"
                            Background="{TemplateBinding Property=Background}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=TextBox.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=TextBox.Focus.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                    <Condition Property="IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource ResourceKey={x:Static Member=SystemColors.InactiveSelectionHighlightBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type TypeName=ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=ToggleButton}">
                    <Border Padding="{TemplateBinding Property=Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90" />
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{DynamicResource ResourceKey=Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19"
                                         Stroke="{DynamicResource ResourceKey=Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19" />
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{DynamicResource ResourceKey=Expander.Static.Arrow.Stroke}"
                                      StrokeThickness="2" VerticalAlignment="Center" />
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.MouseOver.Circle.Stroke}" />
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.MouseOver.Circle.Fill}" />
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ResourceKey=Expander.MouseOver.Arrow.Stroke}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.Pressed.Circle.Stroke}" />
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5" />
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.Pressed.Circle.Fill}" />
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ResourceKey=Expander.Pressed.Arrow.Stroke}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.Disabled.Circle.Stroke}" />
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.Disabled.Circle.Fill}" />
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ResourceKey=Expander.Disabled.Arrow.Stroke}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type TypeName=ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=ToggleButton}">
                    <Border Padding="{TemplateBinding Property=Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180" />
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{DynamicResource ResourceKey=Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19"
                                         Stroke="{DynamicResource ResourceKey=Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19" />
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{DynamicResource ResourceKey=Expander.Static.Arrow.Stroke}"
                                      StrokeThickness="2" VerticalAlignment="Center" />
                            </Grid>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.MouseOver.Circle.Stroke}" />
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.MouseOver.Circle.Fill}" />
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ResourceKey=Expander.MouseOver.Arrow.Stroke}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.Pressed.Circle.Stroke}" />
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5" />
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.Pressed.Circle.Fill}" />
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ResourceKey=Expander.Pressed.Arrow.Stroke}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.Disabled.Circle.Stroke}" />
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.Disabled.Circle.Fill}" />
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ResourceKey=Expander.Disabled.Arrow.Stroke}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type TypeName=ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=ToggleButton}">
                    <Border Padding="{TemplateBinding Property=Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90" />
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{DynamicResource ResourceKey=Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19"
                                         Stroke="{DynamicResource ResourceKey=Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19" />
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{DynamicResource ResourceKey=Expander.Static.Arrow.Stroke}"
                                      StrokeThickness="2" VerticalAlignment="Center" />
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.MouseOver.Circle.Stroke}" />
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.MouseOver.Circle.Fill}" />
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ResourceKey=Expander.MouseOver.Arrow.Stroke}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.Pressed.Circle.Stroke}" />
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5" />
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.Pressed.Circle.Fill}" />
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ResourceKey=Expander.Pressed.Arrow.Stroke}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.Disabled.Circle.Stroke}" />
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.Disabled.Circle.Fill}" />
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ResourceKey=Expander.Disabled.Arrow.Stroke}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type TypeName=ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=ToggleButton}">
                    <Border Padding="{TemplateBinding Property=Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Ellipse Grid.Column="0" x:Name="circle" Fill="{DynamicResource ResourceKey=Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19"
                                     Stroke="{DynamicResource ResourceKey=Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19" />
                            <Path Grid.Column="0" x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{DynamicResource ResourceKey=Expander.Static.Arrow.Stroke}"
                                  StrokeThickness="2" VerticalAlignment="Center" />
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="{TemplateBinding Property=HorizontalContentAlignment}" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True"
                                              VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.MouseOver.Circle.Stroke}" />
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.MouseOver.Circle.Fill}" />
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ResourceKey=Expander.MouseOver.Arrow.Stroke}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.Pressed.Circle.Stroke}" />
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5" />
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.Pressed.Circle.Fill}" />
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ResourceKey=Expander.Pressed.Arrow.Stroke}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.Disabled.Circle.Stroke}" />
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ResourceKey=Expander.Disabled.Circle.Fill}" />
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ResourceKey=Expander.Disabled.Arrow.Stroke}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=Expander}">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=Expander}">
                    <Border BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}"
                            CornerRadius="3" SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding Property=HeaderTemplate}" ContentTemplateSelector="{TemplateBinding Property=HeaderTemplateSelector}"
                                          Content="{TemplateBinding Property=Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Property=Foreground}" FontWeight="{TemplateBinding Property=FontWeight}"
                                          FocusVisualStyle="{StaticResource ResourceKey=ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding Property=FontStyle}" FontStretch="{TemplateBinding Property=FontStretch}"
                                          FontSize="{TemplateBinding Property=FontSize}" FontFamily="{TemplateBinding Property=FontFamily}" HorizontalContentAlignment="{TemplateBinding Property=HorizontalContentAlignment}"
                                          IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0"
                                          Padding="{TemplateBinding Property=Padding}" Style="{StaticResource ResourceKey=ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding Property=VerticalContentAlignment}" />
                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding Property=HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Property=Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding Property=VerticalContentAlignment}" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right" />
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left" />
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ResourceKey=ExpanderRightHeaderStyle}" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top" />
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom" />
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ResourceKey=ExpanderUpHeaderStyle}" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left" />
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right" />
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ResourceKey=ExpanderLeftHeaderStyle}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TypeName=TextBox}">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="CaretBrush" Value="{DynamicResource ResourceKey=ABrush.Glyph.Static}" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxToggleButtonStyle" TargetType="{x:Type TypeName=ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=ToggleButton}">
                    <Border x:Name="templateRoot" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}"
                            Background="{TemplateBinding Property=Background}" SnapsToDevicePixels="true">
                        <Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true"
                                Width="{DynamicResource ResourceKey={x:Static Member=SystemParameters.VerticalScrollBarWidthKey}}">
                            <Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" Fill="{DynamicResource ResourceKey=ComboBox.Static.Glyph}"
                                  HorizontalAlignment="Center" Margin="0 3 0 0" VerticalAlignment="Center" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type TypeName=ComboBox}}}" Value="true" />
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=IsPressed, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ResourceKey=ComboBox.Static.Editable.Background}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ResourceKey=ComboBox.Static.Editable.Border}" />
                            <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource ResourceKey=ComboBox.Static.Editable.Button.Background}" />
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ResourceKey=ComboBox.Static.Editable.Button.Border}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{DynamicResource ResourceKey=ComboBox.MouseOver.Glyph}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type TypeName=ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ResourceKey=ComboBox.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ResourceKey=ComboBox.MouseOver.Border}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type TypeName=ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ResourceKey=ComboBox.MouseOver.Editable.Background}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ResourceKey=ComboBox.MouseOver.Editable.Border}" />
                            <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource ResourceKey=ComboBox.MouseOver.Editable.Button.Background}" />
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ResourceKey=ComboBox.MouseOver.Editable.Button.Border}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{DynamicResource ResourceKey=ComboBox.Pressed.Glyph}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type TypeName=ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ResourceKey=ComboBox.Pressed.Background}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ResourceKey=ComboBox.Pressed.Border}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type TypeName=ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ResourceKey=ComboBox.Pressed.Editable.Background}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ResourceKey=ComboBox.Pressed.Editable.Border}" />
                            <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource ResourceKey=ComboBox.Pressed.Editable.Button.Background}" />
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ResourceKey=ComboBox.Pressed.Editable.Button.Border}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="arrow" Value="{DynamicResource ResourceKey=ComboBox.Disabled.Glyph}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type TypeName=ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ResourceKey=ComboBox.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ResourceKey=ComboBox.Disabled.Border}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type TypeName=ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ResourceKey=ComboBox.Disabled.Editable.Background}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ResourceKey=ComboBox.Disabled.Editable.Border}" />
                            <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource ResourceKey=ComboBox.Disabled.Editable.Button.Background}" />
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ResourceKey=ComboBox.Disabled.Editable.Button.Border}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type TypeName=ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition MinWidth="{DynamicResource ResourceKey={x:Static Member=SystemParameters.VerticalScrollBarWidthKey}}" Width="0" />
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                   Margin="1" PopupAnimation="{DynamicResource ResourceKey={x:Static Member=SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                <themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding Property=MaxDropDownHeight}" MinWidth="{Binding Path=ActualWidth, ElementName=templateRoot}">
                    <Border x:Name="dropDownBorder" BorderBrush="{DynamicResource ResourceKey=Popup.Static.Border}" BorderThickness="1" Background="{DynamicResource ResourceKey=Popup.Static.Background}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Path=Background, ElementName=dropDownBorder}" Height="{Binding Path=ActualHeight, ElementName=dropDownBorder}"
                                               Width="{Binding Path=ActualWidth, ElementName=dropDownBorder}" />
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </themes:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding Property=BorderBrush}" Grid.ColumnSpan="2" Grid.Column="0" BorderThickness="{TemplateBinding Property=BorderThickness}"
                          Background="{TemplateBinding Property=Background}" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                          Style="{StaticResource ResourceKey=ComboBoxToggleButtonStyle}" />
            <ContentPresenter Grid.Column="0" x:Name="contentPresenter" ContentTemplate="{TemplateBinding Property=SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding Property=ItemTemplateSelector}"
                              Content="{TemplateBinding Property=SelectionBoxItem}" ContentStringFormat="{TemplateBinding Property=SelectionBoxItemStringFormat}" IsHitTestVisible="false" Margin="5,2,2,3"
                              SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding Property=HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Property=VerticalContentAlignment}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5" />
                <Setter Property="Color" TargetName="shadow" Value="#71000000" />
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding Path=VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding Path=HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type TypeName=ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition MinWidth="{DynamicResource ResourceKey={x:Static Member=SystemParameters.VerticalScrollBarWidthKey}}" Width="0" />
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                   PopupAnimation="{DynamicResource ResourceKey={x:Static Member=SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                <themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding Property=MaxDropDownHeight}" MinWidth="{Binding Path=ActualWidth, ElementName=templateRoot}">
                    <Border x:Name="dropDownBorder" BorderBrush="{DynamicResource ResourceKey=Popup.Static.Border}" BorderThickness="1" Background="{DynamicResource ResourceKey=Popup.Static.Background}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Path=Background, ElementName=dropDownBorder}" Height="{Binding Path=ActualHeight, ElementName=dropDownBorder}"
                                               Width="{Binding Path=ActualWidth, ElementName=dropDownBorder}" />
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </themes:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}"
                          Grid.ColumnSpan="2" Grid.Column="0" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                          Style="{StaticResource ResourceKey=ComboBoxToggleButtonStyle}" />
            <Border Grid.Column="0" x:Name="border" Background="{DynamicResource ResourceKey=TextBox.Static.Background}" Margin="{TemplateBinding Property=BorderThickness}">
                <TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding Property=HorizontalContentAlignment}" IsReadOnly="{Binding Path=IsReadOnly, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                         Margin="{TemplateBinding Property=Padding}" Style="{StaticResource ResourceKey=ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding Property=VerticalContentAlignment}" />
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" TargetName="border" Value="0.56" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="Foreground" Value="Orange" />
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5" />
                <Setter Property="Color" TargetName="shadow" Value="#71000000" />
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding Path=VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding Path=HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type TypeName=ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="4,1" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type TypeName=ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type TypeName=ItemsControl}}}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=Button.Static.Foreground}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource ResourceKey=FocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=ComboBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}"
                            Padding="{TemplateBinding Property=Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding Property=HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding Property=VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource ResourceKey=ABrush.Foreground.Disabled}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ResourceKey=ComboBoxItem.ItemView.Hover.Background}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ResourceKey=ComboBoxItem.ItemView.Hover.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ResourceKey=ComboBoxItem.ItemView.Selected.Background}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ResourceKey=ComboBoxItem.ItemView.Selected.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ResourceKey=ComboBoxItem.ItemView.SelectedHover.Background}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ResourceKey=ComboBoxItem.ItemView.SelectedHover.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsKeyboardFocused" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ResourceKey=ComboBoxItem.ItemView.SelectedNoFocus.Background}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ResourceKey=ComboBoxItem.ItemView.SelectedNoFocus.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ResourceKey=ComboBoxItem.ItemView.Focus.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ResourceKey=ComboBoxItem.ItemView.HoverFocus.Background}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ResourceKey=ComboBoxItem.ItemView.HoverFocus.Border}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ResourceKey=FocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey=ComboBox.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=ComboBox.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ComboBox.Static.Foreground}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="6,2,5,3" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template" Value="{StaticResource ResourceKey=ComboBoxTemplate}" />
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false" />
                <Setter Property="Padding" Value="2" />
                <Setter Property="Template" Value="{StaticResource ResourceKey=ComboBoxEditableTemplate}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static Member=GridView.GridViewScrollViewerStyleKey}" TargetType="{x:Type TypeName=ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ScrollViewer">
                    <Grid Background="{TemplateBinding Property=Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <DockPanel Margin="{TemplateBinding Property=Padding}">
                            <ScrollViewer DockPanel.Dock="Top" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Focusable="false">
                                <!-- ReSharper disable Xaml.BindingWithContextNotResolved -->
                                <GridViewHeaderRowPresenter Margin="0" Columns="{Binding Path=TemplatedParent.View.Columns, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                            ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                            ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                            ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector,RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                            AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder,RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                            ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu,RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                            ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip,RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                            SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                                <!-- ReSharper restore Xaml.BindingWithContextNotResolved -->
                            </ScrollViewer>

                            <ScrollContentPresenter Name="PART_ScrollContentPresenter" KeyboardNavigation.DirectionalNavigation="Local" CanContentScroll="True" CanHorizontallyScroll="False" CanVerticallyScroll="False" />
                        </DockPanel>
                        <ScrollBar Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="1" Grid.Column="0" Maximum="{TemplateBinding Property=ScrollableWidth}"
                                   ViewportSize="{TemplateBinding Property=ViewportWidth}" Value="{TemplateBinding Property=HorizontalOffset}" Visibility="{TemplateBinding Property=ComputedHorizontalScrollBarVisibility}" />
                        <ScrollBar Name="PART_VerticalScrollBar" Grid.Row="0" Grid.Column="1" Maximum="{TemplateBinding Property=ScrollableHeight}" ViewportSize="{TemplateBinding Property=ViewportHeight}"
                                   Value="{TemplateBinding Property=VerticalOffset}" Visibility="{TemplateBinding Property=ComputedVerticalScrollBarVisibility}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GridViewColumnHeaderGripper" TargetType="{x:Type TypeName=Thumb}">
        <Setter Property="Width" Value="18" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=Thumb}">
                    <Border Padding="{TemplateBinding Property=Padding}" Background="Transparent">
                        <Rectangle HorizontalAlignment="Center" Width="1" Fill="{DynamicResource ResourceKey=ListView.GridView.Grip.Background}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type TypeName=GridViewColumnHeader}" TargetType="{x:Type TypeName=GridViewColumnHeader}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GridViewColumnHeader">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Pressed" />
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="HeaderBorder" BorderThickness="0,0,0,1" Padding="2,0,2,0" BorderBrush="{DynamicResource ResourceKey=ListView.GridView.Static.Border}"
                                Background="{DynamicResource ResourceKey=ListView.GridView.HeaderItem.Background}">
                            <ContentPresenter x:Name="HeaderContent" Margin="0,0,0,1" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding Property=VerticalContentAlignment}"
                                              HorizontalAlignment="{TemplateBinding Property=HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                        </Border>
                        <Thumb x:Name="PART_HeaderGripper" HorizontalAlignment="Right" Margin="0,0,-9,0" Style="{StaticResource ResourceKey=GridViewColumnHeaderGripper}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="HeaderBorder" Value="{DynamicResource ResourceKey=ListView.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="HeaderBorder" Value="{DynamicResource ResourceKey=ListView.Disabled.Border}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="HeaderBorder" Value="{DynamicResource ResourceKey=ListView.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="HeaderBorder" Value="{DynamicResource ResourceKey=ListView.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="HeaderBorder" Value="{DynamicResource ResourceKey=ListView.MouseDown.Background}" />
                            <Setter Property="BorderBrush" TargetName="HeaderBorder" Value="{DynamicResource ResourceKey=ListView.MouseDown.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Role" Value="Floating">
                <Setter Property="Opacity" Value="0.7" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="GridViewColumnHeader">
                            <Canvas Name="PART_FloatingHeaderCanvas">
                                <Rectangle Fill="#60000000" Width="{TemplateBinding Property=ActualWidth}" Height="{TemplateBinding Property=ActualHeight}" />
                            </Canvas>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Role" Value="Padding">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="GridViewColumnHeader">
                            <Border Name="HeaderBorder" BorderThickness="0,0,0,1" Background="{DynamicResource ResourceKey=ListView.GridView.Static.Background}"
                                    BorderBrush="{DynamicResource ResourceKey=ListView.GridView.Static.Border}" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type TypeName=DataGrid}}" TargetType="{x:Type TypeName=Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=Button}">
                    <Grid>
                        <Rectangle x:Name="Border" Fill="{DynamicResource ResourceKey=ABrush.Tone4.Background.Static}" SnapsToDevicePixels="True" />
                        <Polygon x:Name="Arrow" Fill="{DynamicResource ResourceKey=ABrush.Glyph.Static}" HorizontalAlignment="Right" Margin="8,8,3,3" Opacity="0.15" Points="0,10 10,10 10,0"
                                 Stretch="Uniform" VerticalAlignment="Bottom" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="Border" Value="{DynamicResource ResourceKey=ABrush.Tone4.Border.Static}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="Border" Value="{DynamicResource ResourceKey=ABrush.Tone4.Background.MouseDown}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Visibility" TargetName="Arrow" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=DataGridColumnHeadersPresenter}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=DataGrid.HeaderItem.Static.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=DataGridColumnHeadersPresenter}">
                    <Border Background="{TemplateBinding Property=Background}" BorderThickness="0">
                        <Grid>
                            <DataGridColumnHeader x:Name="PART_FillerColumnHeader" IsHitTestVisible="False"
                                                  Background="{TemplateBinding Property=Background}"
                                                  BorderBrush="{TemplateBinding Property=BorderBrush}"
                                                  Foreground="{TemplateBinding Property=Foreground}"
                                                  Padding="{TemplateBinding Property=Padding}" />
                            <ItemsPresenter />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type TypeName=Thumb}">
        <Setter Property="Width" Value="8" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Cursor" Value="SizeWE" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=Thumb}">
                    <Border Background="{TemplateBinding Property=Background}" Padding="{TemplateBinding Property=Padding}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=DataGridColumnHeader}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=DataGrid.HeaderItem.Static.Background}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="SeparatorBrush" Value="{DynamicResource ResourceKey=DataGrid.VerticalSeparatorBrush}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="4,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=DataGridColumnHeader}">
                    <Grid>
                        <!--
                        <Themes:DataGridHeaderBorder BorderThickness="{TemplateBinding Property=BorderThickness}"
                                                     IsClickable="{TemplateBinding Property=CanUserSort}"
                                                     IsPressed="{TemplateBinding Property=IsPressed}" IsHovered="{TemplateBinding Property=IsMouseOver}"
                                                     Padding="3" SortDirection="{TemplateBinding Property=SortDirection}"
                                                     SeparatorBrush="{TemplateBinding Property=SeparatorBrush}"
                                                     SeparatorVisibility="{TemplateBinding Property=SeparatorVisibility}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding Property=HorizontalContentAlignment}"
                                              RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding Property=VerticalContentAlignment}" />
                        </Themes:DataGridHeaderBorder>
                        -->
                        <Border x:Name="PART_Border" BorderThickness="{TemplateBinding Property=BorderThickness}" BorderBrush="{TemplateBinding Property=BorderBrush}" Padding="{TemplateBinding Property=Padding}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding Property=HorizontalContentAlignment}"
                                              RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding Property=VerticalContentAlignment}" />
                        </Border>
                        <Border Background="{TemplateBinding Property=SeparatorBrush}" Width="1" HorizontalAlignment="Right" Visibility="{TemplateBinding Property=SeparatorVisibility}" />
                        <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource ResourceKey=ColumnHeaderGripperStyle}" />
                        <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource ResourceKey=ColumnHeaderGripperStyle}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_Border" Property="Background" Value="{DynamicResource ResourceKey=DataGrid.HeaderItem.MouseOver.Background}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="PART_Border" Property="Background" Value="{DynamicResource ResourceKey=DataGrid.HeaderItem.MouseDown.Background}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=DataGridRow}">
        <Setter Property="Background" Value="{Binding Path=Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TypeName=DataGrid}}}" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="ValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <TextBlock Foreground="Red" Margin="2,0,0,0" Text="!" VerticalAlignment="Center" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=DataGridRow}">
                    <Border x:Name="DGR_Border" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}"
                            Background="{TemplateBinding Property=Background}" SnapsToDevicePixels="True">
                        <SelectiveScrollingGrid>
                            <SelectiveScrollingGrid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </SelectiveScrollingGrid.ColumnDefinitions>
                            <SelectiveScrollingGrid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </SelectiveScrollingGrid.RowDefinitions>
                            <DataGridCellsPresenter Grid.Column="1" ItemsPanel="{TemplateBinding Property=ItemsPanel}" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                            <DataGridDetailsPresenter Grid.Column="1" Grid.Row="1" Visibility="{TemplateBinding Property=DetailsVisibility}"
                                                      SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding Path=AreRowDetailsFrozen, ConverterParameter={x:Static Member=SelectiveScrollingOrientation.Vertical}, Converter={x:Static Member=DataGrid.RowDetailsScrollingConverter}, RelativeSource={RelativeSource AncestorType={x:Type TypeName=DataGrid}}}" />
                            <DataGridRowHeader Grid.Row="0" Grid.Column="0" Grid.RowSpan="2" SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"
                                               Visibility="{Binding Path=HeadersVisibility, ConverterParameter={x:Static Member=DataGridHeadersVisibility.Row}, Converter={x:Static Member=DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type TypeName=DataGrid}}}" />
                        </SelectiveScrollingGrid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsNewItem" Value="True">
                <Setter Property="Margin" Value="{Binding Path=NewItemMargin, RelativeSource={RelativeSource AncestorType={x:Type TypeName=DataGrid}}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <BooleanToVisibilityConverter x:Key="B2VConverter" />
    <Style x:Key="RowHeaderGripperStyle" TargetType="{x:Type TypeName=Thumb}">
        <Setter Property="Height" Value="8" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Cursor" Value="SizeNS" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=Thumb}">
                    <Border Background="{TemplateBinding Property=Background}" Padding="{TemplateBinding Property=Padding}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=DataGridRowHeader}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=DataGrid.RowHeader.Static.Background}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=DataGridRowHeader}">
                    <Grid>
                        <themes:DataGridHeaderBorder BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}"
                                                     IsPressed="{TemplateBinding Property=IsPressed}" IsHovered="{TemplateBinding Property=IsMouseOver}" IsSelected="{TemplateBinding Property=IsRowSelected}"
                                                     Orientation="Horizontal" Padding="{TemplateBinding Property=Padding}" SeparatorBrush="{TemplateBinding Property=SeparatorBrush}"
                                                     SeparatorVisibility="{TemplateBinding Property=SeparatorVisibility}">
                            <StackPanel Orientation="Horizontal">
                                <ContentPresenter RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" VerticalAlignment="Center" />
                                <Control SnapsToDevicePixels="false" Template="{Binding Path=ValidationErrorTemplate, RelativeSource={RelativeSource AncestorType={x:Type TypeName=DataGridRow}}}"
                                         Visibility="{Binding Path=(Validation.HasError), Converter={StaticResource ResourceKey=B2VConverter}, RelativeSource={RelativeSource AncestorType={x:Type TypeName=DataGridRow}}}" />
                            </StackPanel>
                        </themes:DataGridHeaderBorder>
                        <Thumb x:Name="PART_TopHeaderGripper" Style="{StaticResource RowHeaderGripperStyle}" VerticalAlignment="Top" />
                        <Thumb x:Name="PART_BottomHeaderGripper" Style="{StaticResource RowHeaderGripperStyle}" VerticalAlignment="Bottom" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=DataGridCell}">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=DataGridCell}">
                    <Border x:Name="border" Background="{DynamicResource ResourceKey=DataGrid.CellItem.Static.Background}" BorderThickness="0" SnapsToDevicePixels="True">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ResourceKey=DataGrid.CellItem.MouseOver.Background}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ResourceKey=DataGrid.Row.Selected.Background}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DataGridTextColumnElementStyle" TargetType="{x:Type TypeName=TextBlock}" BasedOn="{StaticResource {x:Type TypeName=TextBlock}}" />
    <Style x:Key="DataGridTextColumnEditingElementStyle" TargetType="{x:Type TypeName=TextBox}" BasedOn="{StaticResource {x:Type TypeName=TextBox}}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="-2,0" />
    </Style>

    <Style x:Key="DataGridComboBoxColumnEditingElementStyle" TargetType="{x:Type TypeName=ComboBox}" BasedOn="{StaticResource {x:Type TypeName=ComboBox}}">
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <Style x:Key="DataGridCheckBoxColumnElementStyle" TargetType="{x:Type TypeName=CheckBox}" BasedOn="{StaticResource {x:Type TypeName=CheckBox}}">
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>
    <Style x:Key="DataGridCheckBoxColumnEditingElementStyle" TargetType="{x:Type TypeName=CheckBox}" BasedOn="{StaticResource ResourceKey=DataGridCheckBoxColumnElementStyle}" />

    <Style TargetType="{x:Type TypeName=DataGrid}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=DataGrid.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=DataGrid.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource ResourceKey=DataGrid.VerticalSeparatorBrush}" />
        <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource ResourceKey=DataGrid.HorizontalSeparatorBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=DataGrid}">
                    <Border BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}"
                            Padding="{TemplateBinding Property=Padding}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type TypeName=ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <Button Grid.Row="0" Grid.Column="0" Command="{x:Static Member=DataGrid.SelectAllCommand}" Focusable="false"
                                                Style="{DynamicResource ResourceKey={ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type TypeName=DataGrid}}}"
                                                Visibility="{Binding Path=HeadersVisibility, ConverterParameter={x:Static Member=DataGridHeadersVisibility.All}, Converter={x:Static Member=DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type TypeName=DataGrid}}}"
                                                Width="{Binding Path=CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type TypeName=DataGrid}}}" />
                                        <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Row="0" Grid.Column="1"
                                                                        Visibility="{Binding Path=HeadersVisibility, ConverterParameter={x:Static Member=DataGridHeadersVisibility.Column}, Converter={x:Static Member=DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type TypeName=DataGrid}}}" />
                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding Property=CanContentScroll}" Grid.ColumnSpan="2" Grid.Column="0" Grid.Row="1" />
                                        <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2" Maximum="{TemplateBinding Property=ScrollableHeight}" Orientation="Vertical" Grid.Row="1"
                                                   Visibility="{TemplateBinding Property=ComputedVerticalScrollBarVisibility}" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                   ViewportSize="{TemplateBinding Property=ViewportHeight}" />
                                        <Grid Grid.Column="1" Grid.Row="2">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding Path=NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type TypeName=DataGrid}}}" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding Property=ScrollableWidth}" Orientation="Horizontal"
                                                       Visibility="{TemplateBinding Property=ComputedHorizontalScrollBarVisibility}" ViewportSize="{TemplateBinding Property=ViewportWidth}"
                                                       Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TypeName=ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="4,1" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type TypeName=ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type TypeName=ItemsControl}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource ResourceKey=FocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=ListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding Property=BorderBrush}"
                            BorderThickness="{TemplateBinding Property=BorderThickness}"
                            Background="{TemplateBinding Property=Background}"
                            Padding="{TemplateBinding Property=Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding Property=HorizontalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding Property=VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ResourceKey=Item.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ResourceKey=Item.MouseOver.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ResourceKey=Item.SelectedInactive.Background}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ResourceKey=Item.SelectedInactive.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ResourceKey=Item.SelectedActive.Background}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ResourceKey=Item.SelectedActive.Border}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource ResourceKey=ABrush.Foreground.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=ListBox}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=ListBox.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=ListBox.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=ListBox}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding Property=BorderBrush}"
                            BorderThickness="{TemplateBinding Property=BorderThickness}"
                            Background="{TemplateBinding Property=Background}" SnapsToDevicePixels="true">
                        <ScrollViewer x:Name="PART_ScrollViewer" Focusable="false" Padding="{TemplateBinding Property=Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ResourceKey=ListBox.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ResourceKey=ListBox.Disabled.Border}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=ListViewItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="4,1" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type TypeName=ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type TypeName=ItemsControl}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource ResourceKey=FocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=ListViewItem}">
                    <Border x:Name="Bd" Padding="2" SnapsToDevicePixels="true" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}"
                            Background="{TemplateBinding Property=Background}">
                        <GridViewRowPresenter VerticalAlignment="{TemplateBinding Property=VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ResourceKey=Item.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ResourceKey=Item.MouseOver.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ResourceKey=Item.SelectedInactive.Background}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ResourceKey=Item.SelectedInactive.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ResourceKey=Item.SelectedActive.Background}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ResourceKey=Item.SelectedActive.Border}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource ResourceKey=ABrush.Foreground.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=ListView}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=ListView.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=ListView.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=ListView}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}"
                            Background="{TemplateBinding Property=Background}" Padding="0" SnapsToDevicePixels="True">
                        <ScrollViewer Style="{DynamicResource ResourceKey={x:Static Member=GridView.GridViewScrollViewerStyleKey}}">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ResourceKey=ListBox.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ResourceKey=ListBox.Disabled.Border}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static Member=ToolBar.ButtonStyleKey}" TargetType="{x:Type TypeName=Button}" BasedOn="{StaticResource {x:Type TypeName=Button}}" />
    <Style x:Key="{x:Static Member=ToolBar.ToggleButtonStyleKey}" TargetType="{x:Type TypeName=ToggleButton}" BasedOn="{StaticResource {x:Type TypeName=ToggleButton}}" />
    <Style x:Key="{x:Static Member=ToolBar.CheckBoxStyleKey}" TargetType="{x:Type TypeName=CheckBox}" BasedOn="{StaticResource {x:Type TypeName=CheckBox}}" />
    <Style x:Key="{x:Static Member=ToolBar.RadioButtonStyleKey}" TargetType="{x:Type TypeName=RadioButton}" BasedOn="{StaticResource {x:Type TypeName=RadioButton}}" />

    <Style TargetType="{x:Type TypeName=ToolBarTray}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=ToolBarTrayBackground}" />
    </Style>

    <Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type TypeName=ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=ToolBarToggleButtonVerticalBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=ToolBarToggleButtonVerticalBorder}" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=ToggleButton}">
                    <Border x:Name="Bd" Background="{TemplateBinding Property=Background}" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}"
                            CornerRadius="0,0,3,3" SnapsToDevicePixels="true">
                        <Canvas HorizontalAlignment="Right" Height="6" Margin="2,7,2,2" SnapsToDevicePixels="true" VerticalAlignment="Bottom" Width="7">
                            <Path Data="M 1.5 1 L 1.5 6" Stroke="{DynamicResource ResourceKey=ToolBarDropDownBackgroundVert}" />
                            <Path Data="M 0.5 0 L 0.5 5" Stroke="{DynamicResource ResourceKey=ToolBarDropDownVert}" />
                            <Path Data="M 3.5 0.5 L 7 3.5 L 4 6.5 Z" Fill="{DynamicResource ResourceKey=ToolBarDropDownBackgroundVert}" />
                            <Path Data="M 3 -0.5 L 6 2.5 L 3 5.5 Z" Fill="{DynamicResource ResourceKey=ToolBarDropDownVert}" />
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ResourceKey=ToolBarButtonHover}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ResourceKey=ToolBarButtonHover}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ToolBarGripper}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type TypeName=ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=ToolBarToggleButtonHorizontalBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=ToolBarToggleButtonHorizontalBorder}" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=ToggleButton}">
                    <Border x:Name="Bd" Background="{TemplateBinding Property=Background}" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}"
                            CornerRadius="0,3,3,0" SnapsToDevicePixels="true">
                        <Canvas HorizontalAlignment="Right" Height="7" Margin="7,2,2,2" SnapsToDevicePixels="true" VerticalAlignment="Bottom" Width="6">
                            <Path Data="M 1 1.5 L 6 1.5" Stroke="{DynamicResource ResourceKey=ToolBarDropDownBackground}" />
                            <Path Data="M 0 0.5 L 5 0.5" Stroke="{DynamicResource ResourceKey=ToolBarDropDown}" />
                            <Path Data="M 0.5 4 L 6.5 4 L 3.5 7 Z" Fill="{DynamicResource ResourceKey=ToolBarDropDownBackground}" />
                            <Path Data="M -0.5 3 L 5.5 3 L 2.5 6 Z" Fill="{DynamicResource ResourceKey=ToolBarDropDown}" />
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ResourceKey=ToolBarButtonHover}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ResourceKey=ToolBarButtonHover}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ToolBarGripper}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static Member=SystemParameters.HighContrast}}" Value="true">
                <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static Member=SystemColors.ControlBrushKey}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type TypeName=Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=Thumb}">
                    <Border Background="Transparent" Padding="{TemplateBinding Property=Padding}" SnapsToDevicePixels="True">
                        <Rectangle>
                            <Rectangle.Fill>
                                <DrawingBrush TileMode="Tile" Viewbox="0,0,4,4" Viewport="0,0,4,4" ViewportUnits="Absolute" ViewboxUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <GeometryDrawing Brush="{DynamicResource ResourceKey=ToolBarGripperBackground}" Geometry="M 1 1 L 1 3 L 3 3 L 3 1 z" />
                                            <GeometryDrawing Brush="{DynamicResource ResourceKey=ToolBarGripper}" Geometry="M 0 0 L 0 2 L 2 2 L 2 0 z" />
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Cursor" Value="SizeAll" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolBarMainPanelBorderStyle" TargetType="{x:Type TypeName=Border}">
        <Setter Property="Margin" Value="0,0,11,0" />
        <Setter Property="CornerRadius" Value="3,3,3,3" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static Member=SystemParameters.HighContrast}}" Value="true">
                <Setter Property="CornerRadius" Value="0,0,0,0" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToolBarButtonBaseStyle" TargetType="{x:Type TypeName=ButtonBase}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ResourceKey=FocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey=Button.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=Button.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=Button.Static.Foreground}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}"
                            Background="{TemplateBinding Property=Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding Property=HorizontalContentAlignment}" Margin="{TemplateBinding Property=Padding}"
                                          RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Property=VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey={x:Static Member=SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ResourceKey=Button.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=Button.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ResourceKey=Button.Pressed.Background}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=Button.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ResourceKey=Button.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=Button.Disabled.Border}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource ResourceKey=Button.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=ToolBar}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=ToolBarHorizontalBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=ToolBarHorizontalBorder}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="Padding" Value="2,1,1,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=ToolBar}">
                    <Grid x:Name="Grid" Margin="{TemplateBinding Property=Padding}" SnapsToDevicePixels="true">
                        <Grid x:Name="OverflowGrid" HorizontalAlignment="Right">
                            <ToggleButton x:Name="OverflowButton" ClickMode="Press" FocusVisualStyle="{x:Null}"
                                          IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                          IsEnabled="{TemplateBinding Property=HasOverflowItems}" Style="{StaticResource ResourceKey=ToolBarHorizontalOverflowButtonStyle}" />
                            <Popup x:Name="OverflowPopup" AllowsTransparency="true" Focusable="false"
                                   IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                   PopupAnimation="{DynamicResource ResourceKey={x:Static Member=SystemParameters.ComboBoxPopupAnimationKey}}"
                                   Placement="Bottom" StaysOpen="false">
                                <themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                                    <Border x:Name="ToolBarSubMenuBorder" BorderBrush="{DynamicResource ResourceKey=ToolBarMenuBorder}"
                                            BorderThickness="1" Background="{DynamicResource ResourceKey=ToolBarSubMenuBackground}" RenderOptions.ClearTypeHint="Enabled">
                                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" KeyboardNavigation.DirectionalNavigation="Cycle"
                                                              FocusVisualStyle="{x:Null}" Focusable="true" Margin="2"
                                                              SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}"
                                                              KeyboardNavigation.TabNavigation="Cycle" WrapWidth="200" />
                                    </Border>
                                </themes:SystemDropShadowChrome>
                            </Popup>
                        </Grid>
                        <Border x:Name="MainPanelBorder" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}"
                                Background="{TemplateBinding Property=Background}" Padding="{TemplateBinding Property=Padding}" Style="{StaticResource ResourceKey=ToolBarMainPanelBorderStyle}">
                            <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                                <Thumb x:Name="ToolBarThumb" Margin="-3,-1,0,0" Padding="6,5,1,6"
                                       Style="{StaticResource ResourceKey=ToolBarThumbStyle}" Width="10" />
                                <ContentPresenter x:Name="ToolBarHeader" ContentSource="Header"
                                                  HorizontalAlignment="Center" Margin="4,0,4,0"
                                                  SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}"
                                                  VerticalAlignment="Center" />
                                <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" Margin="0,1,2,2" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                            </DockPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOverflowOpen" Value="true">
                            <Setter Property="IsEnabled" TargetName="ToolBarThumb" Value="false" />
                        </Trigger>
                        <Trigger Property="Header" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="true">
                            <Setter Property="Visibility" TargetName="ToolBarThumb" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasDropShadow" SourceName="OverflowPopup" Value="true">
                            <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5" />
                            <Setter Property="SnapsToDevicePixels" TargetName="Shdw" Value="true" />
                            <Setter Property="Color" TargetName="Shdw" Value="#71000000" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="Margin" TargetName="Grid" Value="1,3,1,1" />
                            <Setter Property="Style" TargetName="OverflowButton" Value="{StaticResource ResourceKey=ToolBarVerticalOverflowButtonStyle}" />
                            <Setter Property="Height" TargetName="ToolBarThumb" Value="10" />
                            <Setter Property="Width" TargetName="ToolBarThumb" Value="Auto" />
                            <Setter Property="Margin" TargetName="ToolBarThumb" Value="-1,-3,0,0" />
                            <Setter Property="Padding" TargetName="ToolBarThumb" Value="5,6,6,1" />
                            <Setter Property="Margin" TargetName="ToolBarHeader" Value="0,0,0,4" />
                            <Setter Property="Margin" TargetName="PART_ToolBarPanel" Value="1,0,2,2" />
                            <Setter Property="DockPanel.Dock" TargetName="ToolBarThumb" Value="Top" />
                            <Setter Property="DockPanel.Dock" TargetName="ToolBarHeader" Value="Top" />
                            <Setter Property="HorizontalAlignment" TargetName="OverflowGrid" Value="Stretch" />
                            <Setter Property="VerticalAlignment" TargetName="OverflowGrid" Value="Bottom" />
                            <Setter Property="Placement" TargetName="OverflowPopup" Value="Right" />
                            <Setter Property="Margin" TargetName="MainPanelBorder" Value="0,0,0,11" />
                            <Setter Property="Background" Value="{DynamicResource ResourceKey=ToolBarVerticalBackground}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=TabItem}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ResourceKey=FocusVisual}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey=TabItem.Static.Background}" />
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TabControl}, Path=BorderBrush}" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="10,4,10,4" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=TabItem}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Border x:Name="mainBorder" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="1,1,1,0" Background="{TemplateBinding Property=Background}" Margin="0">
                            <Border x:Name="innerBorder" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="1,1,1,0"
                                    Background="{Binding Path=Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TypeName=TabControl}}}" Margin="-1" Opacity="0" />
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" ContentSource="Header" Focusable="False"
                                          HorizontalAlignment="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type TypeName=ItemsControl}}}"
                                          Margin="{TemplateBinding Property=Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}"
                                          VerticalAlignment="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type TypeName=ItemsControl}}}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TypeName=TabControl}}}" Value="Left" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ResourceKey=TabItem.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ResourceKey=TabItem.MouseOver.Border}" />
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1" />
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TypeName=TabControl}}}" Value="Bottom" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ResourceKey=TabItem.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ResourceKey=TabItem.MouseOver.Border}" />
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1" />
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TypeName=TabControl}}}" Value="Right" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ResourceKey=TabItem.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ResourceKey=TabItem.MouseOver.Border}" />
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1" />
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TypeName=TabControl}}}" Value="Top" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ResourceKey=TabItem.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ResourceKey=TabItem.MouseOver.Border}" />
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0" />
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TypeName=TabControl}}}" Value="Left" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56" />
                            <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ResourceKey=TabItem.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ResourceKey=TabItem.Disabled.Border}" />
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1" />
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TypeName=TabControl}}}" Value="Bottom" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56" />
                            <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ResourceKey=TabItem.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ResourceKey=TabItem.Disabled.Border}" />
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1" />
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TypeName=TabControl}}}" Value="Right" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56" />
                            <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ResourceKey=TabItem.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ResourceKey=TabItem.Disabled.Border}" />
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1" />
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TypeName=TabControl}}}" Value="Top" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56" />
                            <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ResourceKey=TabItem.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ResourceKey=TabItem.Disabled.Border}" />
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0" />
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TypeName=TabControl}}}" Value="Left" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1" />
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TypeName=TabControl}}}" Value="Left" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1" />
                            <Setter Property="Margin" Value="-2,-2,0,-2" />
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1" />
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1" />
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TypeName=TabControl}}}" Value="Bottom" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1" />
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TypeName=TabControl}}}" Value="Bottom" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1" />
                            <Setter Property="Margin" Value="-2,0,-2,-2" />
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1" />
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1" />
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TypeName=TabControl}}}" Value="Right" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1" />
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TypeName=TabControl}}}" Value="Right" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1" />
                            <Setter Property="Margin" Value="0,-2,-2,-2" />
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1" />
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1" />
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TypeName=TabControl}}}" Value="Top" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0" />
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TypeName=TabControl}}}" Value="Top" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1" />
                            <Setter Property="Margin" Value="-2,-2,-2,0" />
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1" />
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0" />
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NoOffsetTabItem" TargetType="{x:Type TypeName=TabItem}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ResourceKey=FocusVisual}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey=TabItem.Static.Background}" />
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TabControl}, Path=BorderBrush}" />
        <Setter Property="Margin" Value="-1,0,0,0" />
        <Setter Property="Padding" Value="10,4,10,4" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=TabItem}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Border x:Name="mainBorder" Background="{TemplateBinding Property=Background}" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="0,0,1,1" />
                        <Border x:Name="PART_SelectionBorder" Background="{DynamicResource ResourceKey=ABrush.AccentTone2.Background.Static}" VerticalAlignment="Bottom" Height="2" Visibility="Collapsed" />
                        <ContentPresenter x:Name="contentPresenter" ContentSource="Header" Focusable="False"
                                          HorizontalAlignment="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type TypeName=ItemsControl}}}"
                                          Margin="{TemplateBinding Property=Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}"
                                          VerticalAlignment="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type TypeName=ItemsControl}}}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ResourceKey=TabItem.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ResourceKey=TabItem.MouseOver.Background}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ResourceKey=ABrush.Tone4.Background.Disabled}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ResourceKey=ABrush.Tone4.Background.Disabled}" />
                            <Setter Property="Visibility" TargetName="PART_SelectionBorder" Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56" />
                            <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ResourceKey=TabItem.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ResourceKey=TabItem.Disabled.Background}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=TabControl}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey=TabItem.Selected.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=TabItem.Selected.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=TabControl}">
                    <Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0" />
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                            <RowDefinition x:Name="RowDefinition1" Height="*" />
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="headerPanel" Background="Transparent" Grid.Column="0" IsItemsHost="true" Margin="2,2,2,0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1" />
                        <Border x:Name="contentPanel" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}"
                                Background="{TemplateBinding Property=Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Property=Padding}" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="1" />
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto" />
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,0,2,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="1" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,2,0,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="1" />
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="0" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Margin" TargetName="headerPanel" Value="0,2,2,2" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource ResourceKey=ABrush.Foreground.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <BorderGapMaskConverter x:Key="BorderGapMaskConverter" />
    <Style TargetType="{x:Type TypeName=GroupBox}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=GroupBox.Header.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=GroupBox.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="5" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="32" MinHeight="32" />
                            <RowDefinition />
                            <RowDefinition Height="6" />
                        </Grid.RowDefinitions>
                        <Border Background="{TemplateBinding Property=Background}"
                                BorderBrush="{TemplateBinding Property=BorderBrush}"
                                BorderThickness="{TemplateBinding Property=BorderThickness}"
                                Grid.ColumnSpan="4" Grid.RowSpan="2" />
                        <Border x:Name="Header" Grid.Column="1" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2">
                            <ContentPresenter VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                        </Border>
                        <Border Background="Transparent" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Margin="0,-1,0,0"
                                Grid.ColumnSpan="4" Grid.Column="0" Grid.Row="2" Grid.RowSpan="2">
                            <ContentPresenter x:Name="Contents" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NoBorderGroupBox" TargetType="{x:Type TypeName=GroupBox}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=GroupBox.Header.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=GroupBox.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="5" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="32" MinHeight="32" />
                            <RowDefinition />
                            <RowDefinition Height="6" />
                        </Grid.RowDefinitions>
                        <Border Background="{TemplateBinding Property=Background}" BorderThickness="0" Grid.ColumnSpan="4" Grid.RowSpan="2" />
                        <Border x:Name="Header" Grid.Column="1" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2">
                            <ContentPresenter VerticalAlignment="{TemplateBinding Property=VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding Property=HorizontalContentAlignment}"
                                              ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                        </Border>
                        <Border Background="Transparent" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="0" Margin="0,0,0,0" Grid.ColumnSpan="4" Grid.Column="0" Grid.Row="2" Grid.RowSpan="2">
                            <ContentPresenter x:Name="Contents" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ThinGroupBox" TargetType="{x:Type TypeName=GroupBox}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=GroupBox.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=GroupBox.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="5" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="32" MinHeight="32" />
                            <RowDefinition />
                            <RowDefinition Height="6" />
                        </Grid.RowDefinitions>
                        <Border Background="{TemplateBinding Property=Background}"
                                BorderBrush="{TemplateBinding Property=BorderBrush}"
                                BorderThickness="1,1,1,0"
                                Grid.ColumnSpan="4" Grid.RowSpan="2" />
                        <Border x:Name="Header" Grid.Column="1" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2">
                            <ContentPresenter VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                        </Border>
                        <Border Background="Transparent" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="1,0,1,1" Margin="0,0,0,0"
                                Grid.ColumnSpan="4" Grid.Column="0" Grid.Row="2" Grid.RowSpan="2">
                            <ContentPresenter x:Name="Contents" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SquaredGroupBox" TargetType="{x:Type TypeName=GroupBox}">
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=GroupBox.Static.Border}" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey=GroupBox.Static.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="6" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="6" />
                        </Grid.RowDefinitions>
                        <Border BorderBrush="Transparent" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}"
                                Grid.ColumnSpan="4" Grid.Column="0" CornerRadius="0" Grid.Row="1" Grid.RowSpan="3" />
                        <Border BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Grid.ColumnSpan="4" Grid.Column="0" CornerRadius="0" Grid.Row="1" Grid.RowSpan="3">
                            <Border.OpacityMask>
                                <MultiBinding ConverterParameter="7" Converter="{StaticResource ResourceKey=BorderGapMaskConverter}">
                                    <Binding ElementName="Header" Path="ActualWidth" />
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                                </MultiBinding>
                            </Border.OpacityMask>
                            <Border BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" CornerRadius="0">
                                <Border BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" CornerRadius="0" />
                            </Border>
                        </Border>
                        <Border x:Name="Header" Grid.Column="1" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2">
                            <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                        </Border>
                        <ContentPresenter Grid.ColumnSpan="2" Grid.Column="1" Margin="{TemplateBinding Property=Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DefaultGroupbox" TargetType="{x:Type TypeName=GroupBox}">
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=GroupBox.Static.Border}" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey=GroupBox.Static.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="6" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="6" />
                        </Grid.RowDefinitions>
                        <Border BorderBrush="Transparent" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}"
                                Grid.ColumnSpan="4" Grid.Column="0" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3" />
                        <Border BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Grid.ColumnSpan="4" Grid.Column="0" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3">
                            <Border.OpacityMask>
                                <MultiBinding ConverterParameter="7" Converter="{StaticResource ResourceKey=BorderGapMaskConverter}">
                                    <Binding ElementName="Header" Path="ActualWidth" />
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                                </MultiBinding>
                            </Border.OpacityMask>
                            <Border BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" CornerRadius="3">
                                <Border BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" CornerRadius="2" />
                            </Border>
                        </Border>
                        <Border x:Name="Header" Grid.Column="1" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2">
                            <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                        </Border>
                        <ContentPresenter Grid.ColumnSpan="2" Grid.Column="1" Margin="{TemplateBinding Property=Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="TopLevelMenuItemControlTemplate" TargetType="{x:Type TypeName=MenuItem}">
        <Border x:Name="templateRoot" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}" SnapsToDevicePixels="True">
            <Grid x:Name="Grid" VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" Content="{TemplateBinding Property=Icon}" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3"
                                  SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" VerticalAlignment="Center" Width="16" />
                <Path Grid.Column="0" x:Name="GlyphPanel" Data="F1M10,1.2L4.7,9.1 4.5,9.1 0,5.2 1.3,3.5 4.3,6.1 8.3,0 10,1.2z" Fill="{TemplateBinding Property=Foreground}" FlowDirection="LeftToRight"
                      Margin="3" Visibility="Collapsed" VerticalAlignment="Center" />
                <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding Property=HeaderTemplate}" Content="{TemplateBinding Property=Header}" Grid.Column="1"
                                  ContentStringFormat="{TemplateBinding Property=HeaderStringFormat}" ContentSource="Header" Margin="{TemplateBinding Property=Padding}" RecognizesAccessKey="True"
                                  SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                <Popup Grid.Column="0" x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                       PopupAnimation="{DynamicResource ResourceKey={x:Static Member=SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom">
                    <themes:SystemDropShadowChrome Name="Shdw_2" Color="#71000000" CornerRadius="0" SnapsToDevicePixels="True" Margin="0 0 5 5">
                        <Border x:Name="SubMenuBorder" BorderBrush="{DynamicResource ResourceKey=Popup.Static.Border}" BorderThickness="1" Background="{DynamicResource ResourceKey=Popup.Static.Background}" Padding="0">
                            <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type TypeName=FrameworkElement}}}">
                                <Grid x:Name="Grid1" RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="Canvas" HorizontalAlignment="Left" Height="Auto" VerticalAlignment="Stretch" Width="22">
                                        <Rectangle x:Name="OpaqueRect" Fill="{Binding Path=Background, ElementName=SubMenuBorder}" Height="{Binding Path=ActualHeight, ElementName=SubMenuBorder}"
                                                   Width="{Binding Path=ActualWidth, ElementName=SubMenuBorder}" />
                                    </Canvas>
                                    <Border Background="{DynamicResource ResourceKey=MenuItem.IconBar.Static.Background}"
                                            BorderBrush="{DynamicResource ResourceKey=MenuItem.IconBar.Static.Border}"
                                            BorderThickness="0,0,1,0" Margin="0"
                                            Width="23" HorizontalAlignment="Left" />
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="True"
                                                    SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle" />
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </themes:SystemDropShadowChrome>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None" />
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible" />
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ResourceKey=MenuItem.MouseOver.Background}" />
                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ResourceKey=MenuItem.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource ResourceKey=ABrush.Foreground.Disabled}" />
                <Setter Property="Background" Value="{DynamicResource ResourceKey=MenuItem.Disabled.Background}" />
            </Trigger>
            <Trigger Property="CanContentScroll" SourceName="SubMenuScrollViewer" Value="False">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding Path=VerticalOffset, ElementName=SubMenuScrollViewer}" />
                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding Path=HorizontalOffset, ElementName=SubMenuScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="SubLevelMenuItemSubmenuHeaderControlTemplate" TargetType="{x:Type TypeName=MenuItem}">
        <Border x:Name="templateRoot" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}" SnapsToDevicePixels="True">
            <Grid Margin="-1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto" />
                    <ColumnDefinition Width="13" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="30" />
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto" />
                    <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" Content="{TemplateBinding Property=Icon}" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3"
                                  SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" VerticalAlignment="Center" Width="16" />
                <Border Grid.Column="0" x:Name="GlyphPanel" Background="{DynamicResource ResourceKey=MenuItem.Square.Static.Background}" BorderBrush="{DynamicResource ResourceKey=MenuItem.Square.Static.Border}"
                        BorderThickness="1" Height="22" Margin="-1,0,0,0" Visibility="Hidden" VerticalAlignment="Center" Width="22">
                    <Path x:Name="Glyph" Data="F1M10,1.2L4.7,9.1 4.5,9.1 0,5.2 1.3,3.5 4.3,6.1 8.3,0 10,1.2z" Fill="#FF212121" FlowDirection="LeftToRight" Height="11" Width="9" />
                </Border>
                <ContentPresenter ContentTemplate="{TemplateBinding Property=HeaderTemplate}" Content="{TemplateBinding Property=Header}" Grid.Column="2" ContentStringFormat="{TemplateBinding Property=HeaderStringFormat}"
                                  ContentSource="Header" HorizontalAlignment="Left" Margin="{TemplateBinding Property=Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}"
                                  VerticalAlignment="Center" />
                <TextBlock Grid.Column="4" Margin="{TemplateBinding Property=Padding}" Opacity="0.7" Text="{TemplateBinding Property=InputGestureText}" VerticalAlignment="Center" />
                <Path x:Name="RightArrow" Grid.Column="5" Data="M0,0L4,3.5 0,7z" Fill="{DynamicResource ResourceKey=ABrush.Glyph.Static}" HorizontalAlignment="Left" Margin="10,0,0,0" VerticalAlignment="Center" />
                <Popup Grid.Column="0" x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" HorizontalOffset="-2" IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                       PopupAnimation="{DynamicResource ResourceKey={x:Static Member=SystemParameters.MenuPopupAnimationKey}}" Placement="Right" VerticalOffset="-3">
                    <themes:SystemDropShadowChrome Name="MENU_ITEM_SHADOW" Color="#71000000" CornerRadius="0" SnapsToDevicePixels="True" Margin="0 0 5 5">
                        <Border x:Name="SubMenuBorder" BorderBrush="{DynamicResource ResourceKey=Popup.Static.Border}" Background="{DynamicResource ResourceKey=Popup.Static.Background}" BorderThickness="1" Padding="0">
                            <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type TypeName=FrameworkElement}}}">
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="Canvas" HorizontalAlignment="Left" Height="Auto" VerticalAlignment="Stretch" Width="22">
                                        <Rectangle x:Name="OpaqueRect" Fill="{Binding Path=Background, ElementName=SubMenuBorder}" Height="{Binding Path=ActualHeight, ElementName=SubMenuBorder}"
                                                   Width="{Binding Path=ActualWidth, ElementName=SubMenuBorder}" />
                                    </Canvas>
                                    <Border Background="{DynamicResource ResourceKey=MenuItem.IconBar.Static.Background}"
                                            BorderBrush="{DynamicResource ResourceKey=MenuItem.IconBar.Static.Border}"
                                            BorderThickness="0,0,1,0" Margin="0"
                                            Width="23" HorizontalAlignment="Left" />
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="True" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}"
                                                    KeyboardNavigation.TabNavigation="Cycle" />
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </themes:SystemDropShadowChrome>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None" />
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible" />
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ResourceKey=MenuItem.MouseOver.Background}" />
                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ResourceKey=MenuItem.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource ResourceKey=ABrush.Foreground.Disabled}" />
                <Setter Property="Fill" TargetName="Glyph" Value="{DynamicResource ResourceKey=MenuItem.Disabled.Glyph}" />
                <Setter Property="Fill" TargetName="RightArrow" Value="{DynamicResource ResourceKey=MenuItem.Disabled.Glyph}" />
                <Setter Property="Background" Value="{DynamicResource ResourceKey=MenuItem.Disabled.Background}" />
            </Trigger>
            <Trigger Property="CanContentScroll" SourceName="SubMenuScrollViewer" Value="False">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding Path=VerticalOffset, ElementName=SubMenuScrollViewer}" />
                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding Path=HorizontalOffset, ElementName=SubMenuScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="SubLevelMenuItemSubmenuItemControlTemplate" TargetType="{x:Type TypeName=MenuItem}">
        <Border x:Name="templateRoot" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}" SnapsToDevicePixels="True">
            <Grid Margin="-1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto" />
                    <ColumnDefinition Width="13" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="30" />
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto" />
                    <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" Content="{TemplateBinding Property=Icon}" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3"
                                  SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" VerticalAlignment="Center" Width="16" />
                <Border Grid.Column="0" x:Name="GlyphPanel" Background="{DynamicResource ResourceKey=MenuItem.Square.Static.Background}" BorderBrush="{DynamicResource ResourceKey=MenuItem.Square.Static.Border}"
                        BorderThickness="1" Height="20" Margin="0,1,0,1" Visibility="Hidden" VerticalAlignment="Center" Width="20">
                    <Path x:Name="Glyph" Data="F1M10,1.2L4.7,9.1 4.5,9.1 0,5.2 1.3,3.5 4.3,6.1 8.3,0 10,1.2z" Fill="{DynamicResource ResourceKey=MenuItem.Static.Glyph}" FlowDirection="LeftToRight" Height="9" Width="10" />
                </Border>
                <ContentPresenter ContentTemplate="{TemplateBinding Property=HeaderTemplate}" Content="{TemplateBinding Property=Header}" Grid.Column="2" ContentStringFormat="{TemplateBinding Property=HeaderStringFormat}"
                                  ContentSource="Header" HorizontalAlignment="Left" Margin="{TemplateBinding Property=Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}"
                                  VerticalAlignment="Center" />
                <TextBlock Grid.Column="4" Margin="{TemplateBinding Property=Padding}" Opacity="0.7" Text="{TemplateBinding Property=InputGestureText}" VerticalAlignment="Center" />
                <Path x:Name="RightArrow" Grid.Column="5" Data="M0,0L4,3.5 0,7z" Visibility="Hidden" Fill="{DynamicResource ResourceKey=ABrush.Glyph.Static}" HorizontalAlignment="Left" Margin="10,0,0,0"
                      VerticalAlignment="Center" />
                <Popup Grid.Column="0" x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" HorizontalOffset="-2" IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                       PopupAnimation="{DynamicResource ResourceKey={x:Static Member=SystemParameters.MenuPopupAnimationKey}}" Placement="Right" VerticalOffset="-3">
                    <Border x:Name="SubMenuBorder" BorderBrush="{DynamicResource ResourceKey=Popup.Static.Border}" Background="{DynamicResource ResourceKey=Popup.Static.Background}" BorderThickness="1" Padding="0">
                        <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type TypeName=FrameworkElement}}}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="Canvas" HorizontalAlignment="Left" Height="Auto" VerticalAlignment="Stretch" Width="22">
                                    <Rectangle x:Name="OpaqueRect" Fill="{Binding Path=Background, ElementName=SubMenuBorder}" Height="{Binding Path=ActualHeight, ElementName=SubMenuBorder}"
                                               Width="{Binding Path=ActualWidth, ElementName=SubMenuBorder}" />
                                </Canvas>
                                <Border Background="{DynamicResource ResourceKey=MenuItem.IconBar.Static.Background}"
                                        BorderBrush="{DynamicResource ResourceKey=MenuItem.IconBar.Static.Border}"
                                        BorderThickness="0,0,1,0" Margin="0"
                                        Width="23" HorizontalAlignment="Left" />
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="True" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}"
                                                KeyboardNavigation.TabNavigation="Cycle" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None" />
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible" />
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ResourceKey=MenuItem.MouseOver.Background}" />
                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ResourceKey=MenuItem.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource ResourceKey=ABrush.Foreground.Disabled}" />
                <Setter Property="Fill" TargetName="Glyph" Value="{DynamicResource ResourceKey=MenuItem.Disabled.Glyph}" />
                <Setter Property="Fill" TargetName="RightArrow" Value="{DynamicResource ResourceKey=MenuItem.Disabled.Glyph}" />
                <Setter Property="Background" Value="{DynamicResource ResourceKey=MenuItem.Disabled.Background}" />
            </Trigger>
            <Trigger Property="CanContentScroll" SourceName="SubMenuScrollViewer" Value="False">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding Path=VerticalOffset, ElementName=SubMenuScrollViewer}" />
                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding Path=HorizontalOffset, ElementName=SubMenuScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type TypeName=MenuItem}">
        <Style.Triggers>
            <Trigger Property="IsCheckable" Value="True">
                <Setter Property="StaysOpenOnClick" Value="True" />
            </Trigger>

            <!--
            if (this.IsCheckable || !this.HasItems) {
                Role = this.LogicalParent is Menu ? MenuItemRole.TopLevelItem : MenuItemRole.SubmenuItem;
            }
            else {
                Role = this.LogicalParent is Menu ? MenuItemRole.TopLevelHeader : MenuItemRole.SubmenuHeader;
            }
            -->

            <!-- Contained in Menu | has children -->
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{DynamicResource ResourceKey=TopLevelMenuItemControlTemplate}" />
            </Trigger>
            <!-- Contained in Menu | is checkable or no children -->
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{DynamicResource ResourceKey=TopLevelMenuItemControlTemplate}" />
            </Trigger>
            <!-- Contained in MenuItem hierarchy | has children -->
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{DynamicResource ResourceKey=SubLevelMenuItemSubmenuHeaderControlTemplate}" />
            </Trigger>
            <!-- Contained in MenuItem hierarchy | is checkable or no children -->
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{DynamicResource ResourceKey=SubLevelMenuItemSubmenuItemControlTemplate}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TypeName=Menu}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontFamily" Value="{DynamicResource ResourceKey={x:Static Member=SystemFonts.MenuFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource ResourceKey={x:Static Member=SystemFonts.MenuFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource ResourceKey={x:Static Member=SystemFonts.MenuFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource ResourceKey={x:Static Member=SystemFonts.MenuFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=Menu}">
                    <Border BorderBrush="{TemplateBinding Property=BorderBrush}"
                            BorderThickness="{TemplateBinding Property=BorderThickness}"
                            Background="{TemplateBinding Property=Background}"
                            Padding="{TemplateBinding Property=Padding}"
                            SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=ContextMenu}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=Popup.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=Popup.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=ContextMenu}">
                    <themes:SystemDropShadowChrome Name="CONTEXT_ROOT_SHADOW" Color="Transparent" CornerRadius="0" SnapsToDevicePixels="True">
                        <Border x:Name="Border" Background="{TemplateBinding Property=Background}" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}">
                            <ScrollViewer x:Name="ScrollViewer" VerticalScrollBarVisibility="Hidden">
                                <ItemsPresenter />
                            </ScrollViewer>
                        </Border>
                    </themes:SystemDropShadowChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="True">
                            <Setter TargetName="CONTEXT_ROOT_SHADOW" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="CONTEXT_ROOT_SHADOW" Property="themes:SystemDropShadowChrome.Color" Value="#71000000" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z" />
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type TypeName=ToggleButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey=TreeViewItem.TreeArrow.Static.Fill}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=TreeViewItem.TreeArrow.Static.Stroke}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=ToggleButton}">
                    <Border Background="Transparent" Height="16" Padding="1" Width="16">
                        <!--
                        <Path x:Name="ExpandPath"
                              Data="{StaticResource ResourceKey=TreeArrow}"
                              Fill="{DynamicResource ResourceKey=TreeViewItem.TreeArrow.Static.Fill}"
                              Stroke="{DynamicResource ResourceKey=TreeViewItem.TreeArrow.Static.Stroke}">
                            <Path.RenderTransform>
                                <RotateTransform Angle="135" CenterY="3" CenterX="3" />
                            </Path.RenderTransform>
                        </Path>
                        -->
                        <Grid>
                            <Rectangle x:Name="ExpandPath"
                                       Fill="{DynamicResource ResourceKey=TreeViewItem.TreeArrow.Static.Fill}"
                                       Stroke="{DynamicResource ResourceKey=TreeViewItem.TreeArrow.Static.Stroke}"
                                       StrokeDashArray="2 2"
                                       StrokeThickness="1" />
                            <Label x:Name="ExpandText" FontSize="14" Margin="0 -2 0 0" Content="+" Padding="0" VerticalAlignment="Top" HorizontalAlignment="Center"
                                   Foreground="{DynamicResource ResourceKey=ABrush.Foreground.Static}" FontFamily="Consolas" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Content" TargetName="ExpandText" Value="-" />
                            <!--
                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterY="3" CenterX="3" />
                                </Setter.Value>
                            </Setter>
                            -->
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource ResourceKey=TreeViewItem.TreeArrow.Static.Checked.Fill}" />
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource ResourceKey=TreeViewItem.TreeArrow.Static.Checked.Stroke}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource ResourceKey=TreeViewItem.TreeArrow.MouseOver.Fill}" />
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource ResourceKey=TreeViewItem.TreeArrow.MouseOver.Stroke}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource ResourceKey=TreeViewItem.TreeArrow.MouseOver.Checked.Fill}" />
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource ResourceKey=TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=TreeViewItem}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=TreeViewItem.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=TreeViewItem.Static.Border}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type TypeName=ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type TypeName=ItemsControl}}}" />
        <Setter Property="Padding" Value="1,0,0,0" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource ResourceKey=TreeViewItemFocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>

                        <Rectangle Grid.Row="0" Grid.Column="0" x:Name="HorLn" Margin="9,1,0,0" Height="1" Stroke="{DynamicResource ResourceKey=ABrush.Tone7.Border.Static}"
                                   StrokeDashCap="Square" StrokeDashArray="0,3" StrokeDashOffset="1" SnapsToDevicePixels="True" />
                        <Rectangle Grid.Row="0" Grid.Column="0" x:Name="VerLn" Width="1" Stroke="{DynamicResource ResourceKey=ABrush.Tone7.Border.Static}" StrokeDashCap="Square" StrokeDashArray="0,3"
                                   Margin="0,0,1,0" Grid.RowSpan="2" SnapsToDevicePixels="true" Fill="{DynamicResource ResourceKey=ABrush.Tone7.Border.Static}" />

                        <ToggleButton Grid.Row="0" Grid.Column="0" x:Name="Expander" ClickMode="Press"
                                      IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                      Style="{StaticResource ResourceKey=ExpandCollapseToggleStyle}" />
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding Property=BorderBrush}"
                                BorderThickness="{TemplateBinding Property=BorderThickness}"
                                Background="{TemplateBinding Property=Background}" Grid.Row="0" Grid.Column="1"
                                Padding="{TemplateBinding Property=Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="PART_Header" ContentSource="Header"
                                              VerticalAlignment="{TemplateBinding Property=VerticalContentAlignment}"
                                              HorizontalAlignment="{TemplateBinding Property=HorizontalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden" />
                            <Setter Property="Visibility" TargetName="HorLn" Value="Visible" />
                            <Setter Property="Grid.RowSpan" TargetName="VerLn" Value="2" />
                            <Setter Property="Grid.Row" TargetName="VerLn" Value="0" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="true">
                            <Setter Property="Visibility" TargetName="Expander" Value="Visible" />
                            <Setter Property="Visibility" TargetName="HorLn" Value="Hidden" />
                            <Setter Property="Grid.RowSpan" TargetName="VerLn" Value="1" />
                            <Setter Property="Grid.Row" TargetName="VerLn" Value="2" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ResourceKey=TreeViewItem.Selected.Background}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ResourceKey=TreeViewItem.Selected.Border}" />
                            <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Deeper}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="IsSelectionActive" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ResourceKey=TreeViewItem.Selected.Inactive.Background}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ResourceKey=TreeViewItem.Selected.Inactive.Border}" />
                            <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Disabled}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TreeViewItemStretchedContent" TargetType="{x:Type TypeName=TreeViewItem}" BasedOn="{StaticResource {x:Type TypeName=TreeViewItem}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander" ClickMode="Press"
                                      IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                      Style="{StaticResource ResourceKey=ExpandCollapseToggleStyle}" />
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding Property=BorderBrush}"
                                BorderThickness="{TemplateBinding Property=BorderThickness}"
                                Background="{TemplateBinding Property=Background}" Grid.Row="0" Grid.Column="1"
                                Padding="{TemplateBinding Property=Padding}" SnapsToDevicePixels="true"
                                HorizontalAlignment="Stretch">
                            <ContentPresenter x:Name="PART_Header" ContentSource="Header"
                                              HorizontalAlignment="{TemplateBinding Property=HorizontalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}" />
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.Row="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ResourceKey=TreeViewItem.Selected.Background}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ResourceKey=TreeViewItem.Selected.Border}" />
                            <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Deeper}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="IsSelectionActive" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ResourceKey=TreeViewItem.Selected.Inactive.Background}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ResourceKey=TreeViewItem.Selected.Inactive.Border}" />
                            <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Disabled}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TypeName=TreeView}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=TreeView.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=TreeView.Static.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=TreeView}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding Property=BorderBrush}"
                            BorderThickness="{TemplateBinding Property=BorderThickness}"
                            SnapsToDevicePixels="true">
                        <!-- CanContentScroll must be false, otherwise scrolling breaks -->
                        <ScrollViewer x:Name="_tv_scrollviewer_" Background="{TemplateBinding Property=Background}"
                                      CanContentScroll="false" Focusable="false"
                                      HorizontalScrollBarVisibility="{TemplateBinding Property=ScrollViewer.HorizontalScrollBarVisibility}"
                                      Padding="{TemplateBinding Property=Padding}" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}"
                                      VerticalScrollBarVisibility="{TemplateBinding Property=ScrollViewer.VerticalScrollBarVisibility}">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ResourceKey=TreeView.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ResourceKey=TreeView.Disabled.Border}" />
                        </Trigger>
                        <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                            <Setter Property="CanContentScroll" TargetName="_tv_scrollviewer_" Value="true" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TypeName=Calendar}">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=ABrush.Tone8.Border.Static}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=Calendar}">
                    <StackPanel x:Name="PART_Root" HorizontalAlignment="Center">
                        <CalendarItem Margin="0" x:Name="PART_CalendarItem" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=CalendarItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=CalendarItem}">
                    <ControlTemplate.Resources>
                        <DataTemplate x:Key="{x:Static Member=CalendarItem.DayTitleTemplateResourceKey}">
                            <TextBlock Foreground="{DynamicResource ResourceKey=ABrush.Foreground.Deeper}"
                                       FontWeight="Bold" FontSize="9.5" FontFamily="Verdana" Text="{Binding}"
                                       HorizontalAlignment="Center" Margin="0,6,0,6" VerticalAlignment="Center" />
                        </DataTemplate>
                    </ControlTemplate.Resources>
                    <Grid x:Name="PART_Root">
                        <Grid.Resources>
                            <SolidColorBrush x:Key="DisabledColor" Color="{DynamicResource ResourceKey=AColour.Foreground.Disabled}" />
                        </Grid.Resources>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_DisabledVisual" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="1" Background="{TemplateBinding Property=Background}">
                            <Grid>
                                <Grid.Resources>
                                    <ControlTemplate x:Key="PreviousButtonTemplate" TargetType="{x:Type TypeName=Button}">
                                        <Grid Cursor="Hand">
                                            <VisualStateManager.VisualStateGroups>
                                                <VisualStateGroup x:Name="CommonStates">
                                                    <VisualState x:Name="Normal" />
                                                    <VisualState x:Name="MouseOver">
                                                        <Storyboard>
                                                            <ColorAnimation Duration="0" To="{DynamicResource ResourceKey=AColour.Tone8.Background.MouseOver}" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"
                                                                            Storyboard.TargetName="path" />
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState x:Name="Disabled">
                                                        <Storyboard>
                                                            <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="path" />
                                                        </Storyboard>
                                                    </VisualState>
                                                </VisualStateGroup>
                                            </VisualStateManager.VisualStateGroups>
                                            <Grid>
                                                <Rectangle Fill="Transparent" Stretch="Fill" />
                                                <Path x:Name="path" Data="M288.75,232.25 L288.75,240.625 L283,236.625 z" Fill="{DynamicResource ResourceKey=ABrush.Glyph.Static}" HorizontalAlignment="Left" Height="10"
                                                      Margin="14,0,0,0" Stretch="Fill" VerticalAlignment="Center" Width="6" />
                                            </Grid>
                                        </Grid>
                                    </ControlTemplate>
                                    <ControlTemplate x:Key="NextButtonTemplate" TargetType="{x:Type TypeName=Button}">
                                        <Grid Cursor="Hand">
                                            <VisualStateManager.VisualStateGroups>
                                                <VisualStateGroup x:Name="CommonStates">
                                                    <VisualState x:Name="Normal" />
                                                    <VisualState x:Name="MouseOver">
                                                        <Storyboard>
                                                            <ColorAnimation Duration="0" To="{DynamicResource ResourceKey=AColour.Tone8.Background.MouseOver}" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"
                                                                            Storyboard.TargetName="path" />
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState x:Name="Disabled">
                                                        <Storyboard>
                                                            <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="path" />
                                                        </Storyboard>
                                                    </VisualState>
                                                </VisualStateGroup>
                                            </VisualStateManager.VisualStateGroups>
                                            <Grid>
                                                <Rectangle Fill="Transparent" Stretch="Fill" />
                                                <Path x:Name="path" Data="M282.875,231.875 L282.875,240.375 L288.625,236 z" Fill="{DynamicResource ResourceKey=ABrush.Glyph.Static}" HorizontalAlignment="Right"
                                                      Height="10" Margin="0,0,14,0" Stretch="Fill" VerticalAlignment="Center" Width="6" />
                                            </Grid>
                                        </Grid>
                                    </ControlTemplate>
                                    <ControlTemplate x:Key="HeaderButtonTemplate" TargetType="{x:Type TypeName=Button}">
                                        <Grid Cursor="Hand">
                                            <VisualStateManager.VisualStateGroups>
                                                <VisualStateGroup x:Name="CommonStates">
                                                    <VisualState x:Name="Normal" />
                                                    <VisualState x:Name="MouseOver">
                                                        <Storyboard>
                                                            <ColorAnimation Duration="0" To="{DynamicResource ResourceKey=AColour.Tone8.Background.MouseOver}"
                                                                            Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="buttonContent" />
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState x:Name="Disabled">
                                                        <Storyboard>
                                                            <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="buttonContent" />
                                                        </Storyboard>
                                                    </VisualState>
                                                </VisualStateGroup>
                                            </VisualStateManager.VisualStateGroups>
                                            <ContentPresenter x:Name="buttonContent" ContentTemplate="{TemplateBinding Property=ContentTemplate}" Content="{TemplateBinding Property=Content}"
                                                              TextElement.Foreground="{DynamicResource ResourceKey=ABrush.Foreground.Deeper}" HorizontalAlignment="{TemplateBinding Property=HorizontalContentAlignment}"
                                                              Margin="1,6" VerticalAlignment="{TemplateBinding Property=VerticalContentAlignment}" />
                                        </Grid>
                                    </ControlTemplate>
                                </Grid.Resources>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>
                                <Border Background="{DynamicResource ResourceKey=ABrush.Tone7.Background.Static}" Grid.ColumnSpan="3" />
                                <Border Background="{DynamicResource ResourceKey=ABrush.Tone5.Background.Static}" Grid.ColumnSpan="3" Grid.Column="0" Grid.Row="1" />
                                <Button x:Name="PART_PreviousButton" Grid.Column="0" Focusable="False" HorizontalAlignment="Left" Height="20" Grid.Row="0" Template="{StaticResource ResourceKey=PreviousButtonTemplate}" Width="28" />
                                <Button x:Name="PART_HeaderButton" Grid.Column="1" FontWeight="Bold" Focusable="False" FontSize="10.5" HorizontalAlignment="Center" Grid.Row="0"
                                        Template="{StaticResource ResourceKey=HeaderButtonTemplate}" VerticalAlignment="Center" />
                                <Button x:Name="PART_NextButton" Grid.Column="2" Focusable="False" HorizontalAlignment="Right" Height="20" Grid.Row="0" Template="{StaticResource ResourceKey=NextButtonTemplate}" Width="28" />
                                <Grid x:Name="PART_MonthView" Grid.ColumnSpan="3" Grid.Column="0" HorizontalAlignment="Center" Margin="6,-1,6,6" Grid.Row="1" Visibility="Visible">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                </Grid>
                                <Grid x:Name="PART_YearView" Grid.ColumnSpan="3" Grid.Column="0" HorizontalAlignment="Center" Margin="6,-3,7,6" Grid.Row="1" Visibility="Hidden">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                </Grid>
                            </Grid>
                        </Border>
                        <Rectangle x:Name="PART_DisabledVisual" Fill="{DynamicResource ResourceKey=DisabledColor}" Opacity="0" RadiusY="2" RadiusX="2" Stretch="Fill"
                                   Stroke="{DynamicResource ResourceKey=DisabledColor}" StrokeThickness="1" Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Visibility" TargetName="PART_DisabledVisual" Value="Visible" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TypeName=Calendar}}}" Value="Year">
                            <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden" />
                            <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TypeName=Calendar}}}" Value="Decade">
                            <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden" />
                            <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=DatePickerTextBox}">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey=ABrush.Tone4.Background.Static}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=DatePickerTextBox}">
                    <Grid>
                        <Grid.Resources>
                            <SolidColorBrush x:Key="WatermarkBrush" Color="{Binding Path=Background, RelativeSource={RelativeSource AncestorType={x:Type TypeName=DatePickerTextBox}}, Converter={StaticResource ResourceKey=BrushToColorConverter}}" />
                        </Grid.Resources>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="ContentElement" To="Green" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" />
                                        <ColorAnimation Duration="0" Storyboard.TargetName="watermark_decorator" To="{DynamicResource ResourceKey=AColour.Tone5.Border.MouseOver}"
                                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="WatermarkStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unwatermarked" />
                                <VisualState x:Name="Watermarked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="ContentElement" To="0" Storyboard.TargetProperty="Opacity" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="PART_Watermark" To="1" Storyboard.TargetProperty="Opacity" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unfocused" />
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="FocusVisual" To="1" Storyboard.TargetProperty="Opacity" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Border" Background="{TemplateBinding Property=Background}" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}"
                                CornerRadius="1" Opacity="1" Padding="{TemplateBinding Property=Padding}">
                            <Grid x:Name="WatermarkContent" HorizontalAlignment="{TemplateBinding Property=HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Property=VerticalContentAlignment}">
                                <Border x:Name="ContentElement" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="1" />
                                <Border x:Name="watermark_decorator" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="1">
                                    <ContentControl x:Name="PART_Watermark" Focusable="False" IsHitTestVisible="False" Opacity="0" Padding="2" />
                                </Border>
                                <ScrollViewer x:Name="PART_ContentHost" HorizontalContentAlignment="{TemplateBinding Property=HorizontalContentAlignment}" Margin="0"
                                              VerticalContentAlignment="{TemplateBinding Property=VerticalContentAlignment}" />
                                <Border x:Name="FocusVisual" BorderBrush="{DynamicResource ResourceKey=ABrush.AccentTone2.Border.Static}" CornerRadius="1" IsHitTestVisible="False" Opacity="0" />
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TypeName=DatePicker}">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ABrush.Foreground.Static}" />
        <Setter Property="IsTodayHighlighted" Value="True" />
        <Setter Property="SelectedDateFormat" Value="Short" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey=ABrush.Tone5.Background.Static}" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=ABrush.Tone5.Border.Static}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="CalendarStyle" Value="{StaticResource {x:Type TypeName=Calendar}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=DatePicker}">
                    <Border Background="{TemplateBinding Property=Background}" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}"
                            Padding="{TemplateBinding Property=Padding}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="PART_DisabledVisual" To="1" Storyboard.TargetProperty="Opacity" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="PART_Root" HorizontalAlignment="{TemplateBinding Property=HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Property=VerticalContentAlignment}">
                            <Grid.Resources>
                                <SolidColorBrush x:Key="DisabledBrush" Color="{DynamicResource ResourceKey=AColour.Tone5.Background.Disabled}" />
                                <ControlTemplate x:Key="DropDownButtonTemplate" TargetType="{x:Type TypeName=Button}">
                                    <Grid>
                                        <VisualStateManager.VisualStateGroups>
                                            <VisualStateGroup x:Name="CommonStates">
                                                <VisualStateGroup.Transitions>
                                                    <VisualTransition GeneratedDuration="0" />
                                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Pressed" />
                                                </VisualStateGroup.Transitions>
                                                <VisualState x:Name="Normal" />
                                                <VisualState x:Name="MouseOver">
                                                    <Storyboard>
                                                        <ColorAnimation Duration="0" Storyboard.TargetName="Background" To="#FF448DCA" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" />
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient"
                                                                                      Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[3].(GradientStop.Color)">
                                                            <SplineColorKeyFrame KeyTime="0" Value="#7FFFFFFF" />
                                                        </ColorAnimationUsingKeyFrames>
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient"
                                                                                      Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                                            <SplineColorKeyFrame KeyTime="0" Value="#CCFFFFFF" />
                                                        </ColorAnimationUsingKeyFrames>
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient"
                                                                                      Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                            <SplineColorKeyFrame KeyTime="0" Value="#F2FFFFFF" />
                                                        </ColorAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </VisualState>
                                                <VisualState x:Name="Pressed">
                                                    <Storyboard>
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="Background" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                                                            <SplineColorKeyFrame KeyTime="0" Value="{DynamicResource ResourceKey=AColour.AccentTone3.Background.Static}" />
                                                        </ColorAnimationUsingKeyFrames>
                                                        <DoubleAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="Highlight" Storyboard.TargetProperty="(UIElement.Opacity)">
                                                            <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                                                        </DoubleAnimationUsingKeyFrames>
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient"
                                                                                      Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                            <SplineColorKeyFrame KeyTime="0" Value="#EAFFFFFF" />
                                                        </ColorAnimationUsingKeyFrames>
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient"
                                                                                      Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                                            <SplineColorKeyFrame KeyTime="0" Value="#C6FFFFFF" />
                                                        </ColorAnimationUsingKeyFrames>
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient"
                                                                                      Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[3].(GradientStop.Color)">
                                                            <SplineColorKeyFrame KeyTime="0" Value="#6BFFFFFF" />
                                                        </ColorAnimationUsingKeyFrames>
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient"
                                                                                      Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                                            <SplineColorKeyFrame KeyTime="0" Value="#F4FFFFFF" />
                                                        </ColorAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </VisualState>
                                                <VisualState x:Name="Disabled" />
                                            </VisualStateGroup>
                                        </VisualStateManager.VisualStateGroups>
                                        <Grid Background="{DynamicResource ResourceKey=ABrush.Tone5.Background.Static}" FlowDirection="LeftToRight" HorizontalAlignment="Center" Height="18" Margin="0"
                                              VerticalAlignment="Center" Width="19">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="20*" />
                                                <ColumnDefinition Width="20*" />
                                                <ColumnDefinition Width="20*" />
                                                <ColumnDefinition Width="20*" />
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="23*" />
                                                <RowDefinition Height="19*" />
                                                <RowDefinition Height="19*" />
                                                <RowDefinition Height="19*" />
                                            </Grid.RowDefinitions>
                                            <Border x:Name="Highlight" BorderBrush="{DynamicResource ResourceKey=ABrush.AccentTone3.Border.Static}" BorderThickness="1"
                                                    CornerRadius="0,0,1,1" Grid.ColumnSpan="4" Margin="-1" Opacity="0" Grid.RowSpan="4" Grid.Row="0" />
                                            <Border x:Name="Background" Background="#E5FFFFFF" BorderBrush="#FFFFFFFF" BorderThickness="1" CornerRadius=".5" Grid.ColumnSpan="4" Grid.Column="0"
                                                    Margin="0,-1,0,0" Opacity="1" Grid.RowSpan="3" Grid.Row="1" />
                                            <Border x:Name="BackgroundGradient" BorderBrush="#BF000000" BorderThickness="1" CornerRadius=".5" Grid.ColumnSpan="4" Grid.Column="0"
                                                    Margin="0,-1,0,0" Opacity="1" Grid.RowSpan="3" Grid.Row="1">
                                                <Border.Background>
                                                    <LinearGradientBrush EndPoint=".7,1" StartPoint=".7,0">
                                                        <GradientStop Color="#FFFFFFFF" Offset="0" />
                                                        <GradientStop Color="#F9FFFFFF" Offset="0.375" />
                                                        <GradientStop Color="#E5FFFFFF" Offset="0.625" />
                                                        <GradientStop Color="#C6FFFFFF" Offset="1" />
                                                    </LinearGradientBrush>
                                                </Border.Background>
                                            </Border>
                                            <Rectangle Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="4" StrokeThickness="1">
                                                <Rectangle.Fill>
                                                    <LinearGradientBrush EndPoint="0.3,-1.1" StartPoint="0.46,1.6">
                                                        <GradientStop Color="#FF4084BD" />
                                                        <GradientStop Color="#FFAFCFEA" Offset="1" />
                                                    </LinearGradientBrush>
                                                </Rectangle.Fill>
                                                <Rectangle.Stroke>
                                                    <LinearGradientBrush EndPoint="0.48,-1" StartPoint="0.48,1.25">
                                                        <GradientStop Color="#FF494949" />
                                                        <GradientStop Color="#FF9F9F9F" Offset="1" />
                                                    </LinearGradientBrush>
                                                </Rectangle.Stroke>
                                            </Rectangle>
                                            <Path Grid.Column="0" Grid.ColumnSpan="4" Fill="#FF2F2F2F" HorizontalAlignment="Center" Margin="4,3,4,3" RenderTransformOrigin="0.5,0.5"
                                                  Data="M11.426758,8.4305077 L11.749023,8.4305077 L11.749023,16.331387 L10.674805,16.331387 L10.674805,10.299648 L9.0742188,11.298672 L9.0742188,10.294277 C9.4788408,10.090176 9.9094238,9.8090878 10.365967,9.4510155 C10.82251,9.0929432 11.176106,8.7527733 11.426758,8.4305077 z M14.65086,8.4305077 L18.566387,8.4305077 L18.566387,9.3435936 L15.671368,9.3435936 L15.671368,11.255703 C15.936341,11.058764 16.27293,10.960293 16.681133,10.960293 C17.411602,10.960293 17.969301,11.178717 18.354229,11.615566 C18.739157,12.052416 18.931622,12.673672 18.931622,13.479336 C18.931622,15.452317 18.052553,16.438808 16.294415,16.438808 C15.560365,16.438808 14.951641,16.234707 14.468243,15.826504 L14.881817,14.929531 C15.368796,15.326992 15.837872,15.525723 16.289043,15.525723 C17.298809,15.525723 17.803692,14.895514 17.803692,13.635098 C17.803692,12.460618 17.305971,11.873379 16.310528,11.873379 C15.83071,11.873379 15.399232,12.079271 15.016094,12.491055 L14.65086,12.238613 z"
                                                  Grid.RowSpan="3" Grid.Row="1" Stretch="Fill" VerticalAlignment="Center" />
                                            <Ellipse Grid.Row="0" Grid.ColumnSpan="4" Grid.Column="0" Fill="#FFFFFFFF" HorizontalAlignment="Center" Height="3" StrokeThickness="0" VerticalAlignment="Center" Width="3" />
                                            <Border x:Name="DisabledVisual" BorderBrush="#B2FFFFFF" BorderThickness="1" CornerRadius="0,0,.5,.5" Grid.ColumnSpan="4" Grid.Column="0"
                                                    Opacity="0" Grid.RowSpan="4" Grid.Row="0" />
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </Grid.Resources>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Button x:Name="PART_Button" Grid.Column="1" Foreground="{TemplateBinding Property=Foreground}" Focusable="False" HorizontalAlignment="Left" Margin="3,0,3,0"
                                    Grid.Row="0" Template="{StaticResource ResourceKey=DropDownButtonTemplate}" VerticalAlignment="Top" Width="20" />
                            <DatePickerTextBox x:Name="PART_TextBox" Grid.Column="0" Focusable="{TemplateBinding Property=Focusable}"
                                               HorizontalContentAlignment="Stretch" Grid.Row="0" VerticalContentAlignment="Stretch" />
                            <Grid x:Name="PART_DisabledVisual" Grid.Column="0" Grid.ColumnSpan="2" IsHitTestVisible="False" Opacity="0" Grid.Row="0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Rectangle Grid.Column="0" Fill="{DynamicResource ResourceKey=ABrush.Tone4.Background.Static}" Grid.Row="0" RadiusX="1" RadiusY="1" />
                                <Rectangle Grid.Column="1" Fill="{DynamicResource ResourceKey=ABrush.Tone4.Background.Static}" Height="18" Margin="3,0,3,0" Grid.Row="0" RadiusX="1" RadiusY="1" Width="19" />
                                <Popup Grid.Column="0" x:Name="PART_Popup" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=PART_TextBox}" StaysOpen="False" />
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Source={x:Static Member=SystemParameters.HighContrast}}" Value="false">
                            <Setter Property="Foreground" TargetName="PART_TextBox" Value="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="CloseWindowButtonTemplate" TargetType="{x:Type TypeName=Button}">
        <Border x:Name="border" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}" Background="{TemplateBinding Property=Background}"
                SnapsToDevicePixels="true" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <ContentPresenter x:Name="contentPresenter" Focusable="False" Margin="{TemplateBinding Property=Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding Property=SnapsToDevicePixels}"
                              VerticalAlignment="Center" HorizontalAlignment="Center" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsDefaulted" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=Button.MouseOver.Background}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" TargetName="border" Value="#FFF01428" />
                <Setter Property="BorderBrush" TargetName="border" Value="#FFF01428" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" TargetName="border" Value="#FF940A14" />
                <Setter Property="BorderBrush" TargetName="border" Value="#FF940A14" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" TargetName="border" Value="{DynamicResource ResourceKey=Button.Disabled.Background}" />
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ResourceKey=Button.Disabled.Border}" />
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource ResourceKey=Button.Disabled.Foreground}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="CustomWindowStyle" TargetType="{x:Type TypeName=Window}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=Window.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=Window.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=Window.Static.Foreground}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="WindowStyle" Value="SingleBorderWindow" />
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <!-- In order to have a window shadow, GlassFrameThickness needs to be non-zero which is annoying -->
                <!-- because the glass frame causes this weird flickering white border when resizing :( -->
                <!-- Seems like it's the best idea to just put Top to 1 and the rest on 0, because you'll probably notice it less -->
                <WindowChrome CaptionHeight="26" ResizeBorderThickness="6" CornerRadius="0" GlassFrameThickness="1 0 0 0"
                              NonClientFrameEdges="None" UseAeroCaptionButtons="False" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TypeName=Window}">
                    <Border Background="{TemplateBinding Property=Background}" BorderBrush="{TemplateBinding Property=BorderBrush}" BorderThickness="{TemplateBinding Property=BorderThickness}">
                        <DockPanel>
                            <DockPanel Height="30" x:Name="titlebar" Background="{TemplateBinding Property=BorderBrush}" VerticalAlignment="Top" Margin="0" DockPanel.Dock="Top">
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" DockPanel.Dock="Right">
                                    <Button x:Name="btnMinimize" Focusable="False" Background="Transparent" BorderBrush="Transparent" Width="40" VerticalContentAlignment="Bottom"
                                            WindowChrome.IsHitTestVisibleInChrome="True" Click="Minimize_Event">
                                        <Rectangle Width="10" VerticalAlignment="Center" Margin="1 -24 0 0" Stroke="{DynamicResource ResourceKey=ABrush.Glyph.Static}" StrokeThickness="2" />
                                    </Button>
                                    <Grid x:Name="ThingButtons">
                                        <Button x:Name="btnRestore" Focusable="False" Background="Transparent" BorderBrush="Transparent" Width="40"
                                                WindowChrome.IsHitTestVisibleInChrome="True" Click="AutoMinimize_Event">
                                            <Grid Width="12" Height="12">
                                                <Rectangle StrokeThickness="2" Stroke="{DynamicResource ResourceKey=ABrush.Glyph.Static}" Margin="3,0,0,3" />
                                                <Rectangle StrokeThickness="2" Fill="{DynamicResource ResourceKey=Window.Static.Border}" Stroke="{DynamicResource ResourceKey=ABrush.Glyph.Static}" Margin="0,4,4,0" />
                                            </Grid>
                                        </Button>

                                        <Button x:Name="btnMaximize" Focusable="False" Background="Transparent" BorderBrush="Transparent" Width="40"
                                                WindowChrome.IsHitTestVisibleInChrome="True" Click="AutoMinimize_Event">
                                            <Grid Width="12" Height="12">
                                                <Rectangle StrokeThickness="2" Stroke="{DynamicResource ResourceKey=ABrush.Glyph.Static}" Margin="0" />
                                            </Grid>
                                        </Button>
                                        <Button x:Name="btnWtfEvenLolol" Focusable="False" Background="Transparent" BorderBrush="Transparent" Width="40" WindowChrome.IsHitTestVisibleInChrome="True"
                                                Click="AutoMinimize_Event" Content="^" />
                                    </Grid>
                                    <Button x:Name="btnClose" Focusable="False" Background="Transparent" BorderBrush="Transparent" Template="{DynamicResource ResourceKey=CloseWindowButtonTemplate}"
                                            Width="40" WindowChrome.IsHitTestVisibleInChrome="True" Click="CloseWindow_Event">
                                        <Grid Margin="0 1 0 0">
                                            <Line X1="0" Y1="0" X2="11" Y2="11" Stroke="{DynamicResource ResourceKey=ABrush.Glyph.Static}" StrokeThickness="2" />
                                            <Line X1="0" Y2="0" Y1="11" X2="11" Stroke="{DynamicResource ResourceKey=ABrush.Glyph.Static}" StrokeThickness="2" />
                                        </Grid>
                                    </Button>
                                </StackPanel>
                                <DockPanel Margin="0,0,5,0" HorizontalAlignment="Stretch">
                                    <Image HorizontalAlignment="Left" VerticalAlignment="Top" Margin="4,4,0,0" Source="{Binding Path=Icon, RelativeSource={RelativeSource Mode=TemplatedParent}}" Height="24" />
                                    <TextBlock FontSize="13" Margin="5,3,0,3" VerticalAlignment="Center" HorizontalAlignment="Stretch" TextWrapping="NoWrap" Width="Auto"
                                               Foreground="{TemplateBinding Property=Foreground}" Text="{Binding Path=Title, RelativeSource={RelativeSource Mode=TemplatedParent}}" TextAlignment="Left" />
                                </DockPanel>
                            </DockPanel>
                            <Grid>
                                <AdornerDecorator>
                                    <ContentPresenter />
                                </AdornerDecorator>
                                <ResizeGrip x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom" />
                            </Grid>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
                                <Condition Property="WindowState" Value="Normal" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible" />
                        </MultiTrigger>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="btnRestore" Property="Visibility" Value="Visible" />
                            <Setter TargetName="btnMaximize" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="btnWtfEvenLolol" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter TargetName="btnRestore" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="btnMaximize" Property="Visibility" Value="Visible" />
                            <Setter TargetName="btnWtfEvenLolol" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="WindowState" Value="Minimized">
                            <Setter TargetName="btnRestore" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="btnMaximize" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="btnWtfEvenLolol" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <Trigger Property="ResizeMode" Value="NoResize">
                            <Setter TargetName="ThingButtons" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="btnMinimize" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="CanMinimize">
                            <Setter TargetName="ThingButtons" Property="Visibility" Value="Visible" />
                            <Setter TargetName="btnMinimize" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="CanResizeWithGrip">
                            <Setter TargetName="ThingButtons" Property="Visibility" Value="Visible" />
                            <Setter TargetName="btnMinimize" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="WindowStyle" Value="ToolWindow">
                            <Setter TargetName="ThingButtons" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="btnMinimize" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="WindowStyle" Value="None">
                            <Setter TargetName="titlebar" Property="Visibility" Value="Collapsed" />
                            <Setter Property="WindowChrome.WindowChrome">
                                <Setter.Value>
                                    <WindowChrome CaptionHeight="0" ResizeBorderThickness="6" CornerRadius="0" GlassFrameThickness="1 0 0 0" NonClientFrameEdges="None" UseAeroCaptionButtons="False" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="WindowState" Value="Maximized">
                <Setter Property="BorderThickness" Value="8" />
            </Trigger>
            <Trigger Property="WindowState" Value="Normal">
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>
